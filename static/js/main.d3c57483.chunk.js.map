{"version":3,"sources":["modules/web3_utils.ts","styles/color_palette.ts","components/Navbar.tsx","modules/ipfs_utils.ts","modules/nfticket_utils.ts","components/TicketDisplay.tsx","components/NFTicketSpinner.tsx","components/MyTickets.tsx","components/MyFunds.tsx","components/Home.tsx","components/TicketCanvas.tsx","components/EventDisplay.tsx","components/Events.tsx","components/BuyTickets.tsx","components/TicketForResale.tsx","components/MarketPlace.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["connectWallet","web3UpdateFunction","accountUpdateFunction","chainUpdateFunction","a","accounts","detectEthereumProvider","catch","e","window","alert","message","console","warn","provider","ethereum","web3","Web3","log","request","method","currentProvider","on","account","eth","getChainId","chainId","chain","Promise","all","ColorPalette","NFTicketsNavbar","props","useState","useEffect","web3States","connectToMetamask","maskUpdateFunctions","Navbar","bg","Container","Brand","className","style","color","href","Toggle","Collapse","Nav","to","marginRight","Button","disabled","backgroundColor","borderColor","onClick","IPFS_NODE_URL","IPFS_BASE_URL","BASE_IMAGE_URL","BASE_EXPIRED_IMAGE_URL","ipfsClient","create","url","uploadToIPFS","file","add","added","path","mintNFTicket","nftContract","data","metadata","expirationDateTimestamp","badge","getTime","badge_uri","metadataDoc","JSON","stringify","metadata_url","methods","createEventTickets","unitPrice","maxSupply","percentageOnResale","send","from","getOwnedTickets","call","ownedTickets","getAllEvents","events","balanceOf","ticketId","balance","getTicket","nfTickets","ticket","buyTickets","amount","amountToPay","buyFromOwner","value","getMaticPrice","getRevenue","withdrawFunds","withdrawProceeds","getResaleTickets","contract","resaleTickets","getBlockNumber","fromBlock","toBlock","getPastEvents","eventList","i","length","element","_tokenId","_seller","resale","num","obj","tokenId","seller","numTickets","resalePrice","push","modalStyles","content","top","left","right","bottom","transform","TicketDisplay","setBalance","formatedDate","setFormatedDate","modalIsOpen","setModalIsOpen","resellAmountCounter","setResellAmountCounter","setResalePrice","getExipirationDateFromTimestamp","timestamp","datePieces","Date","toString","split","formattedDate","getBalance","_balance","then","owner","infoStyle","fontSize","border","margin","borderRadius","width","isOpen","onRequestClose","contentLabel","Form","Group","controlId","Label","Control","type","placeholder","onChange","event","target","padding","Row","Col","eventName","expired","src","height","marginLeft","marginTop","zIndex","tokenSalePrice","toUpperCase","allowResell","Modal","setAppElement","NFTicketSpinner","SpinnerDotted","size","spinnerSize","MyTickets","myTickets","setMyTickets","loading","setLoading","loadTickets","processIpfsString","str","str2","finalStirng","scTickets","processedScTickets","key","ticketObj","Object","urlPieces","metadataURI","uriPt1","finalUrl","axios","post","ticketRawMetadata","ticketMetadata","parse","Data","assign","marginBottom","map","idx","MyFunds","funds","setFunds","maticPrice","setMaticPrice","withdrawSuccessful","setWithdrawSuccessful","withdrawError","setWithdrawError","withdrawing","setWithdrawing","_getRevenue","r","Math","round","setTimeout","Home","network","TicketCanvas","uploadedBadgeUrl","setUploadedBadgeUrl","currentBadgeFile","setCurrentBadgeFile","badger","setBadger","canvasRef","useRef","imageRef","badgeRef","eventMetadata","setEventMetadata","eventData","setEventData","setExpirationDateTimestamp","minting","setMinting","mintingError","setMintingError","mintingSuccessful","setMintingSuccessful","drawTicket","canvas","image","ctx","getContext","drawImage","printMetadata","startX","startY","font","fillText","onImageChange","files","local_url","URL","createObjectURL","current","updateImage","fluid","ref","hidden","name","selected","date","EventDisplay","availableForSale","navigate","useNavigate","Events","setEvents","loadEvents","BuyTickets","useParams","ticketCounter","setTicketCounter","buying","setBuying","buyingError","setBuyingError","buyingSuccess","setBuyingSuccess","setTicket","_maticRealPrice","loadTicket","scTicket","valueInWei","ceil","TicketForResale","buyAmountCounter","setBuyAmountCounter","setTicketBuilt","resaleInfo","fullTicket","valueToSend","MarketPlace","resaleList","setResaleList","filter","v","ticketIds","App","setWeb3","setNetwork","setAccount","setContract","isNetworkInvalid","setIsNetworkInvalid","abi","NFTicketContract","Contract","MUMBAI_CONTRACT_ADDRESS","uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g3+/BA8BaA,EAAa,uCAAG,WAAOC,EAAwBC,EAA2BC,GAA1D,qBAAAC,EAAA,6DAGrBC,EAAqB,GAHA,SAQRC,MAAyBC,OAAM,SAACC,GAC7CC,OAAOC,MAAMF,EAAEG,SACfC,QAAQC,KAAK,4BAVQ,cAQzBC,EARyB,UAcRL,OAAOM,UACpBC,EAAO,IAAIC,IAAKH,GAChBF,QAAQM,IAAI,4BAEZF,EAAO,IAAIC,IAAK,yBAEpBhB,EAAmBe,GApBM,SA0BRF,EAASK,QAAQ,CAACC,OAAO,wBA1BjB,cA0BzBf,EA1ByB,OA2BzBH,EAAsBG,EAAS,IAC/BW,EAAKK,gBAAgBC,GAAG,mBAAmB,SAACC,GACxCrB,EAAsBqB,EAAQ,OA7BT,UAiCTP,EAAKQ,IAAIC,aAjCA,eAiCzBC,EAjCyB,OAkCzBvB,EAAoBuB,GACpBV,EAAKK,gBAAgBC,GAAG,eAAxB,uCAAwC,WAAOK,GAAP,SAAAvB,EAAA,sDACpCD,EAAoBwB,GADgB,2CAAxC,uDAnCyB,kBAuClBC,QAAQC,IAAI,CAACb,EAAMX,EAAUqB,KAvCX,4CAAH,0DC3BbI,EACE,UADFA,EAEO,UAFPA,EAMA,UANAA,EAOA,U,OCFE,SAASC,EAAgBC,GAGpC,MAA0DC,oBAAkB,GAA5E,mBACA,GADA,UACkDA,oBAAkB,IAApE,mBACA,GADA,UACgDA,oBAAkB,IAAlE,6BAEAC,qBAAU,WACNtB,QAAQM,IAAI,qBACb,CAACc,EAAMG,WAAW,KAGrB,IAAMC,EAAiB,uCAAG,sBAAAhC,EAAA,sEAChBJ,EAAcgC,EAAMK,oBAAoB,GAAGL,EAAMK,oBAAoB,GAAGL,EAAMK,oBAAoB,IADlF,2CAAH,qDAKvB,OACI,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAX,SACI,eAACC,EAAA,EAAD,WACI,cAACF,EAAA,EAAOG,MAAR,CAAcC,UAAU,wBAAwBC,MAAO,CAACC,MAAM,SAAUC,KAAK,QAA7E,uBACA,cAACP,EAAA,EAAOQ,OAAR,IACA,cAACR,EAAA,EAAOS,SAAR,CAAiBL,UAAU,sBAA3B,SACa,eAACM,EAAA,EAAD,CAAKN,UAAU,UAAf,UACG,cAAC,IAAD,CAAOO,GAAG,IAAIP,UAAU,YAAYC,MAAO,CAACC,MAAM,SAAlD,mBACIZ,EAAMG,WAAW,IAAQ,cAAC,IAAD,CAAMc,GAAG,SAASP,UAAU,YAAYC,MAAO,CAACC,MAAO,SAAvD,qBAC1BZ,EAAMG,WAAW,IAAM,cAAC,IAAD,CAAMc,GAAG,aAAaP,UAAU,YAAYC,MAAO,CAACC,MAAM,SAA1D,yBACvBZ,EAAMG,WAAW,IAAM,cAAC,IAAD,CAAMc,GAAG,eAAeP,UAAU,YAAYC,MAAO,CAACC,MAAM,SAA5D,6BACvBZ,EAAMG,WAAW,IAAM,cAAC,IAAD,CAAMc,GAAG,cAAcP,UAAU,YAAYC,MAAO,CAACC,MAAM,SAA3D,8BAK1C,eAACN,EAAA,EAAOS,SAAR,CAAiBL,UAAU,sBAA3B,UACI,sBAAKC,MAAO,CAACO,YAAY,OAAQN,MAAO,SAAxC,UACI,8BACI,+BAA6B,MAArBZ,EAAMG,WAAW,GAAS,6CAAwB,qDAE9D,8BACKH,EAAMG,WAAW,IAAM,6CAAgBH,EAAMG,WAAW,QAE3DH,EAAMG,WAAW,IAAMH,EAAMG,WAAW,IAAO,8BAAK,sBAAMQ,MAAO,CAACC,MAAM,OAApB,6DAG1D,cAACO,EAAA,EAAD,CAAQC,SAAUpB,EAAMG,WAAW,GAAIQ,MAAO,CAACU,gBAAiBvB,EAA6BwB,YAAaxB,GAA8ByB,QAASnB,EAAjJ,yC,qBClDPoB,EAAgB,8BAChBC,EAAgB,uBAQhBC,EAAc,UAAMD,EAAN,YAJI,kDAMlBE,EAAsB,UAAMF,EAAN,YAJD,kDAO5BG,EAAaC,iBAAO,CAACC,IAAKN,IAGnBO,EAAY,uCAAG,WAAOC,GAAP,iBAAA5D,EAAA,sEACJwD,EAAWK,IAAID,GADX,cAClBE,EADkB,OAExBtD,QAAQM,IAAI,yBACN4C,EAHkB,UAGTN,EAHS,YAGQU,EAAMC,MACtCvD,QAAQM,IAAI,iBAAkB4C,GAJN,kBAKjBI,EAAMC,MALW,2CAAH,sDChBZC,EAAY,uCAAG,WAAOC,EAAkB9C,EAAiB+C,EAAWC,EAAeC,EAA+BC,GAAnG,mBAAArE,EAAA,6DAExBQ,QAAQM,IAAI,sBAAuBqD,GACnC3D,QAAQM,IAAI,mBAAoBuD,GAChC7D,QAAQM,IAAI,kBAAmBsD,EAAwBE,WAJ/B,SAKAX,EAAaU,GALb,cAKlBE,EALkB,OAMxB/D,QAAQM,IAAI,cAAeyD,GAC3BJ,EAASI,UAAYA,EACfC,EAAcC,KAAKC,UAAUP,GARX,UASGR,EAAaa,GAThB,eASlBG,EATkB,OAUxBnE,QAAQM,IAAI,iBAAkB6D,GAC9BnE,QAAQM,IAAI,gCAAiCK,GAXrB,UAYX8C,EAAYW,QAAQC,mBAAmBX,EAAKY,UAAUZ,EAAKa,UAAUb,EAAKc,mBAAoBZ,EAAwBE,UAAUK,GAAcM,KAAK,CAACC,KAAM/D,IAZ/I,qFAAH,gEAyCZgE,EAAe,uCAAG,WAAOlB,EAAkB9C,GAAzB,eAAAnB,EAAA,sEACAiE,EAAYW,QAAQO,gBAAgBhE,GAASiE,OAD7C,cACrBC,EADqB,yBAEpBA,GAFoB,2CAAH,wDAKfC,EAAY,uCAAG,WAAOrB,EAAkB9C,GAAzB,eAAAnB,EAAA,sEACHiE,EAAYW,QAAQU,eAAeF,OADhC,cAClBG,EADkB,yBAEjBA,GAFiB,2CAAH,wDAcZC,EAAS,uCAAG,WAAOvB,EAAkB9C,EAAcsE,GAAvC,eAAAzF,EAAA,sEACCiE,EAAYW,QAAQY,UAAUrE,EAASsE,GAAUL,OADlD,cACfM,EADe,yBAEdA,GAFc,2CAAH,0DAKTC,EAAS,uCAAG,WAAO1B,EAAkBwB,GAAzB,eAAAzF,EAAA,sEACAiE,EAAYW,QAAQgB,UAAUH,GAAUL,OADxC,cACfS,EADe,yBAEdA,GAFc,2CAAH,wDAKTC,EAAU,uCAAG,WAAO7B,EAAkBwB,EAAeM,EAAgB5E,EAAc6E,GAAtE,SAAAhG,EAAA,sEACTiE,EAAYW,QAAQqB,aAAaR,EAAUM,GAAQd,KAAK,CAACC,KAAM/D,EAAS+E,MAAOF,IADtE,mFAAH,8DAIVG,EAAa,uCAAG,WAAOlC,GAAP,SAAAjE,EAAA,sEACZiE,EAAYW,QAAQuB,gBAAgBf,OADxB,mFAAH,sDAIbgB,EAAU,uCAAG,WAAOnC,EAAkB9C,GAAzB,SAAAnB,EAAA,sEACTiE,EAAYW,QAAQwB,WAAWjF,GAASiE,OAD/B,mFAAH,wDAIViB,EAAa,uCAAG,WAAOpC,EAAkB9C,GAAzB,SAAAnB,EAAA,sEACZiE,EAAYW,QAAQ0B,mBAAmBrB,KAAK,CAACC,KAAK/D,IADtC,mFAAH,wDAKboF,EAAgB,uCAAG,WAAM3F,EAAU4F,GAAhB,yBAAAxG,EAAA,6DACxByG,EAAgB,GADQ,KAEJD,EAFI,SAGF5F,EAAKQ,IAAIsF,iBAHP,oCAG0B,IAH1B,MAGpBC,UAHoB,KAIpBC,QAAS,UAJW,cAEKC,cAFL,UAEmB,iBAFnB,MAKnB1G,OAAM,SAACC,GAAD,OAAYC,OAAOC,MAAMF,MALZ,OAEtB0G,EAFsB,OAQnBC,EAAE,EARiB,aAQdA,EAAED,EAAUE,QARE,wBASlBC,EAAUH,EAAUC,GAAV,aATQ,UAaHP,EAAS5B,QAAQ,2BAA2BqC,EAAQC,SAAUD,EAAQE,SAAS/B,OAb5E,QAeL,KAFbgC,EAbkB,QAebC,MACDC,EAAM,CACRC,QAASN,EAAQC,SACjBM,OAAQP,EAAQE,QAChBM,WAAYL,EAAOC,IACnBK,YAAaN,EAAOM,aAKxBjB,EAAckB,KAAKL,IAzBC,QAQMP,IARN,iDA6BrBN,GA7BqB,4CAAH,wD,6CClFvBmB,EAAc,CAChBC,QAAS,CACLC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRnF,YAAa,OACboF,UAAW,0BAMJ,SAASC,EAAcvG,GAElC,MAA8BC,mBAAc,GAA5C,mBAAO6D,EAAP,KAAgB0C,EAAhB,KACA,EAAwCvG,mBAAc,MAAtD,mBAAOwG,EAAP,KAAqBC,EAArB,KACA,EAAsCzG,oBAAS,GAA/C,mBAAO0G,EAAP,KAAoBC,EAApB,KACA,EAAqD3G,mBAAS,GAA9D,mBAAO4G,EAAP,KAA2BC,EAA3B,KACA,EAAsC7G,mBAAS,MAA/C,mBAAO6F,EAAP,KAAoBiB,EAApB,KAGA7G,qBAAU,WACN8G,EAAgChH,EAAMiE,OAAOzB,2BAE/C,IAEF,IAAMwE,EAAkC,SAACC,GACrC,IACIC,EADO,IAAIC,KAAgB,EAAXF,GACEG,WAAWC,MAAM,KACnCC,EAAgBJ,EAAW,GAAK,IAAMA,EAAW,GAAK,IAAMA,EAAW,GAAK,IAAMA,EAAW,GACjGR,EAAgBY,IAGdC,EAAU,uCAAG,4BAAAnJ,EAAA,sEACQwF,EAAU5D,EAAM4E,SAAU5E,EAAMT,QAASS,EAAMiE,OAAOJ,UAD9D,OACT2D,EADS,OAEfhB,EAAWgB,GAFI,2CAAH,qDArB8B,4CAmC9C,4BAAApJ,EAAA,6DACIwI,GAAe,GADnB,UAE0B,EAAA5G,EAAM4E,SAAS5B,SAAQ,wCAAvB,QAAkE,CAAChD,EAAMiE,OAAOJ,SAASgD,EAAoBf,IAAczC,KAAK,CAACC,KAAMtD,EAAMT,UAFvK,cAKQd,OAAOC,MAAM,2BAEbD,OAAOC,MAAM,uBAPrB,4CAnC8C,sBA2B9CwB,qBAAU,WACWqH,IAAaE,MAAK,eACnC7I,QAAQM,IAAI,eAAgB4E,GAC5BlF,QAAQM,IAAI,iBAAkBc,EAAMiE,OAAOyD,OAC3C9I,QAAQM,IAAI,YAAac,EAAMT,SAC/BX,QAAQM,IAAI,QAASc,EAAMT,SAAWS,EAAMiE,OAAOyD,SACrD,IA4BF,IAAMC,EAAY,CACdC,SAAS,SAMb,OAAQ,sBAAKlH,UAAU,OAAOC,MAAO,CAACkH,OAAQ,+BAAgCC,OAAO,OACrEC,aAAa,OAAQ1G,gBAAiBvB,EAAwBkI,MAAM,OAD5E,UAEJ,cAAC,IAAD,CACIC,OAAQtB,EACRuB,eA1BR,WACItB,GAAe,GACfhI,QAAQM,IAAI,kBAAmB4G,EAAa,gBAAiBe,IAyBzDlG,MAAOqF,EACPmC,aAAa,iBAJjB,SAKC,gCACG,gDACA,cAACC,EAAA,EAAD,CAAM1H,UAAU,OAAhB,SACI,eAAC0H,EAAA,EAAKC,MAAN,CAAY3H,UAAU,OAAO4H,UAAU,gBAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,2BACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,eAAeC,YAAY,mBAAmBC,SA1BjF,SAA2BC,GACvBhK,QAAQM,IAAI,mBAAoB0J,EAAMC,OAAOvE,OAC7CyC,EAAe6B,EAAMC,OAAOvE,eA2BxB,4CAAeuC,KACf,gCACI,cAAC1F,EAAA,EAAD,CAAQR,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAYxB,EAA6BoB,YAAY,QAASK,QAAS,WAA4BuF,EAAF,GAArBD,EAA8CA,EAA4CA,EAAoB,IAAvP,eACA,cAAC1F,EAAA,EAAD,CAAQR,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAYxB,GAA8ByB,QAAS,WAAkCuF,EAA7BD,GAAqB/C,EAA+B+C,EAA4CA,EAAoB,IAAzO,kBAEJ,cAAC1F,EAAA,EAAD,CAAQC,SAAuB,MAAb0E,GAA0C,GAArBe,EAAwBtF,QAxFzB,2CAwFgDZ,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAYxB,GAAvJ,yCAGa,MAAhBE,EAAMiE,QACP,qBAAKtD,MAAO,CAACmI,QAAQ,QAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,6BAAKhJ,EAAMiE,OAAO1B,SAAS0G,YAC1BjJ,EAAMiE,OAAOiF,QAAQ,qBAAMC,IAAKxH,EAAwBqG,MAAM,MAAMoB,OAAO,QAAQ,qBAAMD,IAAKzH,EAAgBsG,MAAM,MAAMoB,OAAO,QAClI,qBAAMzI,MAAO,CAAC0I,WAAW,SAAUC,UAAU,SAASC,QAAQ,GAAIJ,IAAK1H,EAAgB,IAAMzB,EAAMiE,OAAO1B,SAASI,UAAWqF,MAAM,KAAKoB,OAAO,UAEpJ,eAACJ,EAAA,EAAD,WAEI,oBAAGrI,MAAOgH,EAAV,wBAAiC3H,EAAMiE,OAAOJ,YAC9C,oBAAGlD,MAAOgH,EAAV,6BAAsC3H,EAAMiE,OAAOd,aACnD,oBAAGxC,MAAOgH,EAAV,oBAA6B3H,EAAMiE,OAAOuF,eAA1C,QACA,oBAAG7I,MAAOgH,EAAV,8BAAuClB,KACvC,oBAAG9F,MAAOgH,EAAV,sBAA+B7D,KAC/B,8BAAG,2CAAqB9D,EAAMiE,OAAOiF,QAAQ,2CAAqB,4CACjElJ,EAAMiE,OAAOyD,MAAM+B,eAAezJ,EAAMT,QAAQkK,cAAc,8CAAqB,uCAClFzJ,EAAM0J,aAAe1J,EAAMiE,OAAOyD,MAAM+B,eAAezJ,EAAMT,QAAQkK,eAAkB,cAACtI,EAAA,EAAD,CAAQI,QA1DjH,WACIqF,GAAe,IAyDkHjG,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAaxB,GAA9F,uCA9G7G6J,IAAMC,cAAc,S,gCCFLC,GAZS,SAAC7J,GAErB,OACI,sBAAKU,UAAU,uBAAuBC,MAAO,CAACqH,MAAM,QAApD,UACI,cAAC8B,GAAA,EAAD,CAAeC,KAAM/J,EAAMgK,YAAYhK,EAAMgK,YAAY,KAAMpJ,MAAOd,IACtE,sBAAMa,MAAO,CAACC,MAAMd,EAA8BuJ,WAAW,QAA7D,SAAuErJ,EAAMrB,cCmE1EsL,GArEG,SAACjK,GAEX,MAAkCC,mBAAc,IAAhD,mBAAOiK,EAAP,KAAkBC,EAAlB,KACA,EAA8BlK,oBAAkB,GAAhD,mBAAOmK,EAAP,KAAgBC,EAAhB,KAIJnK,qBAAU,WACNmK,GAAW,GAEPC,IACK7C,MAAK,SAACnF,GACH+H,GAAW,GACXzL,QAAQM,IAAI,gBAAiBoD,QAEvC,IAGN,IAAMiI,EAAoB,SAACC,GACnB,IACMC,EADOD,EAAInD,MAAM,KAAK,GACVA,MAAM,KAAK,GACvBqD,EAAc,IAAMD,EAAO,IAEjC,OADA7L,QAAQM,IAAI,oBAAqBuL,GAC1BC,GAITJ,EAAW,uCAAG,qBAAAlM,EAAA,2BAAAA,EAAA,6DAChBQ,QAAQM,IAAI,sBADI,SAGaqE,EAAgBvD,EAAM4E,SAAU5E,EAAMT,SAHnD,OAKhB,IAFIoL,EAHY,OAIZC,EAA6B,GACzBxM,EAAI,EAAGA,EAAEuM,EAAUvF,OAAQhH,IAAK,CAGpC,IAAKyM,KAFDA,OADgC,EAEhCC,EAAiB,IAAIC,OACbJ,EAAUvM,GACtB0M,EAAUD,EAAIzD,YAAcuD,EAAUvM,GAAGyM,GAEzCD,EAAmB7E,KAAK+E,GAGpB3F,EAAI,EAdI,YAcDA,EAAGyF,EAAmBxF,QAdrB,wBAgBNnB,EAAa2G,EAAmBzF,GAChC6F,EAAY/G,EAAOgH,YAAY5D,MAAM,KACrC6D,EAASF,EAAUA,EAAU5F,OAAQ,GACrC+F,EAAW3J,EAAgB,0BAA4B0J,EAAS,sBAnB1D,UAoBoBE,KAAMC,KAAKF,GApB/B,QAoBNG,EApBM,OAqBNC,EAAiB1I,KAAK2I,MAAMjB,EAAkBe,EAAkBhJ,KAAKmJ,OAC3Eb,EAAmBzF,GAAK4F,OAAOW,OAAOd,EAAmBzF,GAAI,CAAC5C,SAAUgJ,IAtB5D,QAc6BpG,IAd7B,uBAwBhBgF,EAAaS,GAxBG,4CAAH,qDA4BjB,OAAQ,gCACJ,oBAAIjK,MAAO,CAACgL,aAAa,QAAzB,wBAECvB,GAAW,cAAC,GAAD,CAAiBzL,QAAQ,+BAA+BqL,YAAY,QAGlE,MAAbE,GAAqBA,EAAU0B,KAAI,SAAC3H,EAAY4H,GAEzC,OADJjN,QAAQM,IAAI,cAAe+E,GAChB,cAACsC,EAAD,CAA0BtC,OAAQA,EAAQ1E,QAASS,EAAMT,QAASqF,SAAU5E,EAAM4E,SAAU8E,aAAa,GAApFmC,UCF7BC,GA/DC,SAAC9L,GAEb,MAA0BC,mBAAiB,GAA3C,mBAAO8L,EAAP,KAAcC,EAAd,KACA,EAAoC/L,mBAAiB,GAArD,mBAAOgM,EAAP,KAAmBC,EAAnB,KACA,EAAoDjM,oBAAkB,GAAtE,mBAAOkM,EAAP,KAA2BC,EAA3B,KACA,EAA0CnM,oBAAkB,GAA5D,mBAAOoM,EAAP,KAAsBC,EAAtB,KAEA,EAAsCrM,oBAAkB,GAAxD,mBAAOsM,EAAP,KAAoBC,EAApB,KAGMC,EAAc,WAChBjI,EAAWxE,EAAM4E,SAAU5E,EAAMT,SAC5BkI,MAAK,SAAAiF,GACFV,EAASW,KAAKC,MAAMF,EAAE,KAAD,IAAC,IAAK,IAAG,KAAK,KACnC9N,QAAQM,IAAI,YAAawN,OAGrCxM,qBAAU,WACNqE,EAAcvE,EAAM4E,UACf6C,MAAK,SAAAiF,GACFR,EAAcS,KAAKC,MAAMF,EAAE,KAAD,IAAC,IAAK,GAAE,KAAK,QAG/CD,MACF,IAuBF,OAAQ,gCACJ,0CACA,qBAAK9L,MAAO,CAAC2I,UAAU,QAAvB,SACI,uBAAM3I,MAAO,CAACiH,SAAS,SAAvB,4BAAiD+E,KAAKC,MAAMb,EAAME,EAAW,KAAK,IAAlF,OAA2FF,EAA3F,eAEJ,sBAAKpL,MAAO,CAAC2I,UAAU,QAAvB,WACOiD,KAAiBF,GAAiBF,IAAsB,cAAChL,EAAA,EAAD,CAAQC,SAAkB,IAAR2K,EAAWpL,MAAO,CAACU,gBAAiBvB,EAA6BwB,YAAaxB,GAA8ByB,QA3B1K,WACnBiL,GAAe,GACf/H,EAAczE,EAAM4E,SAAU5E,EAAMT,SAC/BkI,MAAK,WACF+E,GAAe,GACfJ,GAAsB,GACtBK,IACAI,YAAW,WACPT,GAAsB,KACxB,QAGL7N,OAAM,WACHiO,GAAe,GACfF,GAAiB,GACjBO,YAAW,WACPP,GAAiB,KACnB,SAUqD,4BAC1DD,GAAiB,sBAAM1L,MAAO,CAACC,MAAMd,EAAsB8H,SAAS,SAAnD,+DACjBuE,GAAsB,sBAAMxL,MAAO,CAACC,MAAMd,EAAsB8H,SAAS,SAAnD,4CACtB2E,GAAe,cAAC,GAAD,CAAiB5N,QAAQ,yCCzBtCmO,OA/Bf,SAAc9M,GAGV,OACQ,qBAAMU,UAAU,kBAAhB,SACI,eAACqI,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACJ,sDACQ,gCACR,yFACQ,sBAAMrI,MAAO,CAAC2I,UAAU,MAAxB,UACI,sBAAM3I,MAAO,CAACiH,SAAS,SAAvB,sDACA,qBAAIjH,MAAO,CAACiH,SAAS,SAArB,UAER,2DACA,uDACA,mFAKA,cAACoB,EAAA,EAAD,UACKhJ,EAAM4E,UACP,cAAC,GAAD,CAASrF,QAASS,EAAMT,QAASwN,QAAS/M,EAAM+M,QAASnI,SAAU5E,EAAM4E,mB,6BC4LlFoI,I,OA9MM,SAAChN,GAElBpB,QAAQM,IAAI,mBAAoBc,GAChC,MAAiCC,mBAAc,MAA/C,mBACA,GADA,UACgDA,mBAAc,OAA9D,mBAAOgN,EAAP,KAAyBC,EAAzB,KACA,EAAgDjN,mBAAc,MAA9D,mBAAOkN,EAAP,KAAyBC,EAAzB,KACA,EAA4BnN,mBAAc,MAA1C,mBAAOoN,EAAP,KAAeC,EAAf,KACMC,EAAYC,iBAAO,MACnBC,EAAWD,iBAAO,MAClBE,EAAWF,iBAAO,MAGxB,EAA0CvN,mBAAc,IAAxD,mBAAO0N,EAAP,KAAsBC,EAAtB,KACA,EAAkC3N,mBAAc,IAAhD,mBAAO4N,EAAP,KAAkBC,EAAlB,KACA,EAA8D7N,mBAAS,IAAIkH,MAA3E,mBAAO3E,EAAP,KAAgCuL,EAAhC,KACA,EAA8B9N,oBAAkB,GAAhD,mBAAO+N,EAAP,KAAgBC,EAAhB,KAEA,EAAwChO,oBAAkB,GAA1D,mBAAOiO,EAAP,KAAqBC,EAArB,KACA,EAAkDlO,oBAAkB,GAApE,oBAAOmO,GAAP,MAA0BC,GAA1B,MAaMC,GAAa,SAACC,EAAaC,EAAW/L,GAExC,IAAMgM,EAAMF,EAAOG,WAAW,MAC9BD,EAAIF,OAAOvG,MAAQwG,EAAMxG,MACzByG,EAAIF,OAAOnF,OAASoF,EAAMpF,OAC1BqF,EAAIE,UAAUH,EAAM,EAAE,GACR,OAAV/L,IACAgM,EAAIE,UAAUlM,EAAO+L,EAAMxG,MAAM,EAAIvF,EAAMuF,MAAM,EAAGwG,EAAMpF,OAAO,EAAE3G,EAAM2G,OAAO,EAAG,IAAK,KACxFwF,GAAcL,EAAQC,KAKxBI,GAAgB,SAACL,EAAaC,GAChC,IAAMC,EAAMF,EAAOG,WAAW,MACxBG,EAASL,EAAMxG,MAAM,GACrB8G,EAASN,EAAMpF,OAAQoF,EAAMpF,OAAO,EAE1CqF,EAAIM,KAAO,eACXN,EAAIO,SAAJ,sBAA4BrB,EAAc1E,UAAU0E,EAAc1E,UAAU,KAAO4F,EAAQC,GAC3FL,EAAIO,SAAJ,sBAA4BnB,EAAU3K,UAAU2K,EAAU3K,UAAU,KAAK,KAAO2L,EAAQC,EAAS,IACjGL,EAAIO,SAAJ,sBAA4BnB,EAAU1K,UAAU0K,EAAU1K,UAAU,KAAO0L,EAAQC,EAAS,IAC5FL,EAAIO,SAAJ,gCAAsCnB,EAAUzK,mBAAmByK,EAAUzK,mBAAmB,KAAOyL,EAAQC,EAAS,MAMtHG,GAAa,uCAAG,WAAOrG,GAAP,iBAAAxK,EAAA,sDAClBQ,QAAQM,IAAI,kBACR0J,EAAMC,OAAOqG,OAAStG,EAAMC,OAAOqG,MAAM,KACrClN,EAAO4G,EAAMC,OAAOqG,MAAM,GACxBC,EAAYC,IAAIC,gBAAgBrN,GACtCpD,QAAQM,IAAIiQ,GAEZ/B,EAAoBpL,GAEpBkL,EAAoBiC,GACpB7B,EAAUI,EAAS4B,UAVL,2CAAH,sDAuBbC,GAAc,WAChB,IAAMhB,EAAehB,EAAU+B,QACzBd,EAAcf,EAAS6B,QAC7B1Q,QAAQM,IAAI,0BAA2BmO,GACvCiB,GAAWC,EAAQC,EAAOnB,IA0B9BnN,qBAAU,WACNtB,QAAQM,IAAI,sBACZ,IAAMqP,EAAehB,EAAU+B,QACzBd,EAAcf,EAAS6B,QAE7BhB,GAAWC,EAAQC,EAAOnB,KAC3B,IAyBH,OACI,eAAC7M,EAAA,EAAD,CAAWgP,OAAK,EAAC9O,UAAU,4BAA4BC,MA1H5C,CACXkH,OAAQ,+BACRE,aAAa,OACbD,OAAO,OACPE,MAAM,MAEN2D,aAAa,QAoHb,UACI,+CACA,eAAC5C,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,qCAAQtI,UAAU,oBAAoB+O,IAAKlC,GAAevN,IAC1D,qBAAKyP,IAAKhC,EAAUtE,IAAKzH,EAAgBgO,QAAQ,IACjD,qBAAKD,IAAK/B,EAAUvE,IAAK8D,EAAkByC,QAAQ,OAGvD,eAAC1G,EAAA,EAAD,WACI,eAACD,EAAA,EAAD,WACI,8CACA,uBAAOrI,UAAU,OAAjB,2BACA,uBAAO+H,KAAK,OAAOkH,KAAK,UAAUhH,SAAUsG,QAEhD,eAAC7G,EAAA,EAAD,CAAM1H,UAAU,OAAOC,MAAO,CAACqH,MAAM,OAArC,UACI,iDACA,eAACI,EAAA,EAAKC,MAAN,CAAY3H,UAAU,OAAO4H,UAAU,gBAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,yBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,aAAaC,YAAY,mBAAmBpE,MAAOqJ,EAAc1E,UAAWN,SA1ExF,SAACC,GAC5BgF,EAAiB7C,OAAOW,OAAOiC,EAAc,CAAC,UAAa/E,EAAMC,OAAOvE,SACxE1F,QAAQM,IAAI,oBAAqByO,GACjC4B,WA0EgB,eAACnH,EAAA,EAAKC,MAAN,CAAY3H,UAAU,OAAO4H,UAAU,gBAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,6BACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,aAAaC,YAAY,uBAAwBpE,MAAOqJ,EAAczK,UAAWyF,SAzExF,SAACC,GACjCkF,EAAa/C,OAAOW,OAAOmC,EAAU,CAAC,UAAajF,EAAMC,OAAOvE,SAChE1F,QAAQM,IAAI,oBAAqB2O,GACjC0B,WAyEgB,eAACnH,EAAA,EAAKC,MAAN,CAAY3H,UAAU,OAAO4H,UAAU,gBAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,6BACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,aAAaC,YAAY,wBAAwBpE,MAAOqJ,EAAcxK,UAAWwF,SAxExF,SAACC,GACjCkF,EAAa/C,OAAOW,OAAOmC,EAAU,CAAC,UAAajF,EAAMC,OAAOvE,SAChE1F,QAAQM,IAAI,oBAAqB2O,GACjC0B,WAwEgB,eAACnH,EAAA,EAAKC,MAAN,CAAY3H,UAAU,OAAO4H,UAAU,gBAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,mCACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,cAAcC,YAAY,uBAAuBpE,MAAOqJ,EAAcvK,mBAAoBuF,SAvEhG,SAACC,GAClCkF,EAAa/C,OAAOW,OAAOmC,EAAU,CAAC,mBAAsBjF,EAAMC,OAAOvE,SACzEiL,WAuEgB,eAACnH,EAAA,EAAKC,MAAN,CAAY3H,UAAU,OAAO4H,UAAU,iBAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,yBACJ,cAAC,KAAD,CAAYqH,SAAUpN,EAAyBmG,SAAU,SAACkH,GAAD,OAAe9B,EAA2B8B,YAGvG,eAAC9G,EAAA,EAAD,CAAKrI,UAAU,OAAf,WACMsN,KAAaE,GAAgBE,KAAsB,cAACjN,EAAA,EAAD,CAAQR,MAAO,CAACU,gBAAiBvB,EAA6BwB,YAAaxB,EAA6BkI,MAAM,OAAQzG,QAlEzK,WAClB0M,GAAW,GACX7L,EAAapC,EAAM4E,SAAU5E,EAAMT,QAASsO,EAAWF,EAAenL,EAAwB2K,GACzF1F,MAAK,WACFwG,GAAW,GACXI,IAAqB,GACrBxB,YAAW,WACPwB,IAAqB,KAEtB,QAEN9P,OAAM,WACH0P,GAAW,GACXE,GAAgB,GAChBtB,YAAW,WACPsB,GAAgB,KACjB,SAkD0D,0BAEpDD,GAAgB,sBAAMvN,MAAO,CAACC,MAAOd,EAAsB8H,SAAS,SAApD,6DAChBwG,IAAqB,sBAAMzN,MAAO,CAACC,MAAOd,EAAuB8H,SAAS,SAArD,6CAErBoG,GAAW,cAAC,GAAD,CAAiBrP,QAAQ,4CClM9C,SAASmR,GAAa9P,GAEjC,MAAgDC,mBAAc,GAA9D,mBAAO8P,EAAP,KACA,GADA,KACwC9P,mBAAc,OAAtD,mBAAOwG,EAAP,KAAqBC,EAArB,KAEMsJ,EAAWC,cAOjB/P,qBAAU,WAEF,IACIgH,EADO,IAAIC,KAA2C,EAAtCnH,EAAMiE,OAAOzB,yBACX4E,WAAWC,MAAM,KACnCC,EAAgBJ,EAAW,GAAK,IAAMA,EAAW,GAAK,IAAMA,EAAW,GAAK,IAAMA,EAAW,GACjGR,EAAgBY,KAEtB,IAEF,IAKMK,EAAY,CACdC,SAAS,SAIb,OAAQ,qBAAKlH,UAAU,OAAMC,MAAO,CAACkH,OAAQ,+BAAgCC,OAAO,OAChFC,aAAa,OAAQ1G,gBAAiBvB,EAAwBkI,MAAM,OADhE,SAEJ,qBAAKrH,MAAO,CAACmI,QAAQ,QAArB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,sBAAKrI,MAAO,CAAC0I,WAAW,OAAxB,UACA,6BAAKrJ,EAAMiE,OAAO1B,SAAS0G,YAC3B,qBAAME,IAAK1H,EAAgB,IAAMzB,EAAMiE,OAAO1B,SAASI,UAAWqF,MAAM,MAAMoB,OAAO,QACpFpJ,EAAMiE,OAAOiF,QAAQ,8CAAsB,UAGhD,eAACF,EAAA,EAAD,WAEI,oBAAGrI,MAAOgH,EAAV,+BAAwCoI,KACxC,oBAAGpP,MAAOgH,EAAV,oBAA6B3H,EAAMiE,OAAOuF,eAA1C,QACA,oBAAG7I,MAAOgH,EAAV,yBAAkClB,KAClC,oBAAG9F,MAAOgH,EAAV,6BAAsC3H,EAAMiE,OAAOd,aACnD,oBAAGxC,MAAOgH,EAAV,UAAqB,2CAAqB3H,EAAMiE,OAAOiF,QAAQ,2CAAqB,4CAClFlJ,EAAMiE,OAAOiF,SAAWlJ,EAAMiE,OAAOyD,MAAM+B,eAAezJ,EAAMT,QAAQkK,cAAkK,KAApJ,cAACtI,EAAA,EAAD,CAAQR,MAAO,CAACU,gBAAiBvB,EAA6BwB,YAAaxB,GAA8ByB,QA5B/L,WACd,IAAIY,EAAI,wBAAoBnC,EAAMiE,OAAOJ,UACzCmM,EAAS7N,IA0B2F,mCC9C5G,IAgEe+N,GAhEA,SAAClQ,GAEZ,MAA4BC,mBAAc,IAA1C,mBAAO0D,EAAP,KAAewM,EAAf,KACA,EAA8BlQ,oBAAkB,GAAhD,mBAAOmK,EAAP,KAAgBC,EAAhB,KACAnK,qBAAU,WACNmK,GAAW,GACX+F,IACK3I,MAAK,SAACnF,GACH+H,GAAW,GAEXzL,QAAQM,IAAI,gBAAiBoD,QAEvC,IAGF,IAAMiI,EAAoB,SAACC,GACvB,IACMC,EADOD,EAAInD,MAAM,KAAK,GACVA,MAAM,KAAK,GACvBqD,EAAc,IAAMD,EAAO,IAEjC,OADA7L,QAAQM,IAAI,oBAAqBuL,GAC1BC,GAIL0F,EAAU,uCAAG,qBAAAhS,EAAA,2BAAAA,EAAA,6DACfQ,QAAQM,IAAI,sBADG,SAGcwE,EAAa1D,EAAM4E,SAAU5E,EAAMT,SAHjD,OAKf,IAFIoL,EAHW,OAIXC,EAA6B,GACzBxM,EAAI,EAAGA,EAAEuM,EAAUvF,OAAQhH,IAAK,CAGpC,IAAKyM,KAFDA,OADgC,EAEhCC,EAAiB,IAAIC,OACbJ,EAAUvM,GAClB0M,EAAUD,EAAIzD,YAAcuD,EAAUvM,GAAGyM,GAE7CD,EAAmB7E,KAAK+E,GAGpB3F,EAAI,EAdG,YAcAA,EAAGyF,EAAmBxF,QAdtB,wBAgBLnB,EAAa2G,EAAmBzF,GAChC6F,EAAY/G,EAAOgH,YAAY5D,MAAM,KACrC6D,EAASF,EAAUA,EAAU5F,OAAQ,GACrC+F,EAAW3J,EAAgB,0BAA4B0J,EAAS,sBAnB3D,UAoBqBE,KAAMC,KAAKF,GApBhC,QAoBLG,EApBK,OAqBLC,EAAiB1I,KAAK2I,MAAMjB,EAAkBe,EAAkBhJ,KAAKmJ,OAC3Eb,EAAmBzF,GAAK4F,OAAOW,OAAOd,EAAmBzF,GAAI,CAAC5C,SAAUgJ,IAtB7D,QAc8BpG,IAd9B,uBAwBfgL,EAAUvF,GAxBK,4CAAH,qDA2BhB,OAAQ,gCACJ,wCAECR,GAAW,cAAC,GAAD,CAAiBzL,QAAQ,6BAA6BqL,YAAY,QACvE,MAAVrG,GAAkBA,EAAOiI,KAAI,SAAC3H,EAAY4H,GAEvC,OADAjN,QAAQM,IAAI,cAAe+E,GACpB,cAAC6L,GAAD,CAAyB7L,OAAQA,EAAQ1E,QAASS,EAAMT,QAASqF,SAAU5E,EAAM4E,UAA7DiH,UC6CpBwE,GApGI,SAACrQ,GAEhB,IAAO6D,EAAYyM,cAAZzM,SACP,EAA0C5D,mBAAiB,GAA3D,mBAAOsQ,EAAP,KAAsBC,EAAtB,KACA,EAAoCvQ,mBAAc,MAAlD,mBAAOgM,EAAP,KAAmBC,EAAnB,KACA,EAA4BjM,oBAAkB,GAA9C,mBAAOwQ,EAAP,KAAeC,EAAf,KACA,EAAsCzQ,oBAAkB,GAAxD,mBAAO0Q,EAAP,KAAoBC,EAApB,KACA,EAA0C3Q,oBAAkB,GAA5D,mBAAO4Q,EAAP,KAAsBC,EAAtB,KAEAlS,QAAQM,IAAI,WAAY2E,GACxBjF,QAAQM,IAAI,UAAWc,GAEvB,MAA4BC,mBAAc,MAA1C,mBAAOgE,EAAP,KAAe8M,EAAf,KAEA7Q,qBAAU,WACNqE,EAAcvE,EAAM4E,UACf6C,MAAK,SAAAiF,GACF,IAAMsE,EAAkBtE,EAAE,KAAD,IAAC,IAAK,GAC/BR,EAAc8E,GACdpS,QAAQM,IAAI,yBAA0B+M,MAG9CgF,IACKxJ,MAAK,SAACnF,GACH1D,QAAQM,IAAI,eAAgB+E,QAEtC,IAGF,IAAMsG,EAAoB,SAACC,GACvB,IACMC,EADOD,EAAInD,MAAM,KAAK,GACVA,MAAM,KAAK,GACvBqD,EAAc,IAAMD,EAAO,IAEjC,OADA7L,QAAQM,IAAI,oBAAqBuL,GAC1BC,GA6BLuG,EAAU,uCAAG,sCAAA7S,EAAA,6DACfQ,QAAQM,IAAI,qBADG,SAGW6E,EAAU/D,EAAM4E,SAASf,GAHpC,cAGXqN,EAHW,OAITlG,EAAYkG,EAASjG,YAAY5D,MAAM,KACvC6D,EAASF,EAAUA,EAAU5F,OAAQ,GACrC+F,EAAW3J,EAAgB,0BAA4B0J,EAAS,sBANvD,SAOiBE,KAAMC,KAAKF,GAP5B,OAOTG,EAPS,OAQTC,EAAiB1I,KAAK2I,MAAMjB,EAAkBe,EAAkBhJ,KAAKmJ,OAC3EyF,EAAWnG,OAAOW,OAAOwF,EAAU,CAAC3O,SAAUgJ,IAC9CwF,EAAUG,GAVK,4CAAH,qDAahB,OAAQ,gCACJ,6CACU,MAATjN,GAAiB,gCAAK,cAACsC,EAAD,CAAetC,OAAQA,EAAQ1E,QAASS,EAAMT,QAASqF,SAAU5E,EAAM4E,WAC9F,gCACI,yCAAY2L,EAAZ,KAA6BtM,EAAO1B,SAAS0G,UAA7C,eACA,iDAAoBsH,EAActM,EAAOuF,eAAzC,QACA,mDAAsBmD,KAAKC,MAAO2D,EAActM,EAAOuF,eAAeyC,EAAY,KAAK,IAAvF,MAA+FA,EAA/F,oBAEEwE,KAAYE,GAAeE,IAAiB,sBAAKlQ,MAAO,CAACqH,MAAM,OAAnB,UAC9C,cAAC7G,EAAA,EAAD,CAAQR,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAYxB,EAA6BkI,MAAM,MAAO9G,YAAY,QAASK,QAAS,WAAsBiP,EAAF,GAAfD,EAAkCA,EAAgCA,EAAc,IAAtO,eACE,cAACpP,EAAA,EAAD,CAAQR,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAYxB,EAA8BkI,MAAM,MAAQ9G,YAAY,QAASK,QAjDhI,WAChB,IACM4P,EADcZ,EAActM,EAAOuF,eAAiByC,EAC3B,KAAD,IAAC,GAAI,IACnCrN,QAAQM,IAAI,oBAAqBiS,GACjCT,GAAU,GACVxM,EAAWlE,EAAM4E,SAASf,EAAS0M,EAAevQ,EAAMT,QAAQoN,KAAKyE,KAAKD,IACrE1J,MAAK,WACFiJ,GAAU,GACVI,GAAiB,GACjBjE,YAAW,WACPiE,GAAiB,KACnB,KACFlS,QAAQM,IAAI,wCAEfX,OAAM,WACHmS,GAAU,GACVE,GAAe,GACf/D,YAAW,WACP+D,GAAe,KACjB,KACFhS,QAAQM,IAAI,4BA6Bd,iBACF,cAACiC,EAAA,EAAD,CAAQR,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAYxB,EAA6BkI,MAAM,OAAQzG,QAAS,WAAKiP,EAAiBD,EAAc,IAAjK,kBAGCI,GAAe,sBAAMhQ,MAAO,CAACC,MAAMd,EAAsB8H,SAAS,SAAnD,sEACfiJ,GAAiB,sBAAMlQ,MAAO,CAACC,MAAMd,EAAsB8H,SAAS,SAAnD,gDAEjB6I,GAAU,cAAC,GAAD,CAAiB9R,QAAQ,yC,yBCjG1CqH,GAAc,CAChBC,QAAS,CACLC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRnF,YAAa,OACboF,UAAW,0BAMJ,SAAS+K,GAAgBrR,GAEpC,MAA8BC,mBAAc,GAA5C,mBACA,GADA,UACwCA,mBAAc,OAAtD,mBAAOwG,EAAP,KAAqBC,EAArB,KACA,EAAsCzG,oBAAS,GAA/C,mBAAO0G,EAAP,KAAoBC,EAApB,KACA,EAA+C3G,mBAAS,GAAxD,mBAAOqR,EAAP,KAAwBC,EAAxB,KACA,EAAsCtR,mBAAS,MAA/C,mBAAO6F,EAAP,KACA,GADA,KAC4B7F,mBAAc,OAA1C,mBAAOgE,EAAP,KAAe8M,EAAf,KACA,EAAsC9Q,oBAAc,GAApD,mBAAoBuR,GAApB,WACA,EAAoCvR,mBAAc,MAAlD,mBAAOgM,EAAP,KAAmBC,EAAnB,KAEAhM,qBAAU,WACN+Q,IACKxJ,MAAK,WACF,IACIP,EADO,IAAIC,KAAqC,EAAhClD,EAAOzB,yBACL4E,WAAWC,MAAM,KACnCC,EAAgBJ,EAAW,GAAK,IAAMA,EAAW,GAAK,IAAMA,EAAW,GAAK,IAAMA,EAAW,GACjGR,EAAgBY,MAGxB/C,EAAcvE,EAAM4E,UACf6C,MAAK,SAAAiF,GACF,IAAMsE,EAAkBtE,EAAE,KAAD,IAAC,IAAK,GAC/BR,EAAc8E,GACdpS,QAAQM,IAAI,yBAA0B+M,QAEhD,IAWF,IAAM1B,EAAoB,SAACC,GACvB,IACMC,EADOD,EAAInD,MAAM,KAAK,GACVA,MAAM,KAAK,GACvBqD,EAAc,IAAMD,EAAO,IAEjC,OADA7L,QAAQM,IAAI,oBAAqBuL,GAC1BC,GAGLuG,EAAU,uCAAG,wCAAA7S,EAAA,6DACfQ,QAAQM,IAAI,qBADG,SAGW6E,EAAU/D,EAAM4E,SAAS5E,EAAMyR,WAAW9L,SAHrD,cAGXuL,EAHW,OAITlG,EAAYkG,EAASjG,YAAY5D,MAAM,KACvC6D,EAASF,EAAUA,EAAU5F,OAAQ,GACrC+F,EAAW3J,EAAgB,0BAA4B0J,EAAS,sBANvD,SAOiBE,KAAMC,KAAKF,GAP5B,OAOTG,EAPS,OAQTC,EAAiB1I,KAAK2I,MAAMjB,EAAkBe,EAAkBhJ,KAAKmJ,OAC3EyF,EAAWnG,OAAOW,OAAOwF,EAAU,CAAC3O,SAAUgJ,IAC9C3M,QAAQM,IAAI,kBAAmBgS,GACzBQ,EAAa3G,OAAOW,OAAOwF,EAAUlR,EAAMyR,YACjDV,EAAUW,GACVF,GAAe,GAbA,4CAAH,qDA7CgC,4CA8DhD,8BAAApT,EAAA,6DACUuT,EAAcL,EAAiBrN,EAAO6B,YAAcmG,EAC1DrN,QAAQM,IAAI,gBAAiB+M,GAC7BrN,QAAQM,IAAI,kBAAmByS,GACzBR,EAAaQ,EAAY,KAAD,IAAC,GAAI,IACnC/S,QAAQM,IAAI,oBAAqByN,KAAKyE,KAAKD,IAL/C,SAM0BnR,EAAM4E,SAAS5B,QAAQ,4CAA4CiB,EAAO0B,QAAQ1B,EAAO2B,OAAO0L,GAAkBjO,KAAK,CAACC,KAAMtD,EAAMT,QAAS+E,MAAMqI,KAAKyE,KAAKD,KANvL,cASQ1S,OAAOC,MAAM,2BAEbD,OAAOC,MAAM,uBAXrB,4CA9DgD,sBAmFhD,IAAMiJ,EAAY,CACdC,SAAS,SAKb,OAAQ,8BACH3D,GACO,sBAAKvD,UAAU,OAAOC,MAAO,CAACkH,OAAQ,+BAAgCC,OAAO,OACjFC,aAAa,OAAQ1G,gBAAiBvB,EAAwBkI,MAAM,OADhE,UAEJ,cAAC,IAAD,CACIC,OAAQtB,EACRuB,eAlEZ,WACItB,GAAe,GACfhI,QAAQM,IAAI,kBAAmB4G,EAAa,gBAAiBwL,IAiErD3Q,MAAOqF,GACPmC,aAAa,iBAJjB,SAKC,gCACG,uDACA,yCAAYmJ,KACZ,gDAAmBA,EAAiBrN,EAAO6B,YAA3C,QACA,kDAAqB6G,KAAKC,MAAO0E,EAAiBrN,EAAO6B,YAAYmG,EAAY,KAAK,IAAtF,MAA8FA,EAA9F,gBACA,sBAAKtL,MAAO,CAACqH,MAAM,OAAnB,UACI,cAAC7G,EAAA,EAAD,CAAQR,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAYxB,EAA6BoB,YAAY,QAASK,QAAS,WAAyBgQ,EAAF,GAAlBD,EAAwCA,EAAsCA,EAAiB,IAAxO,eACA,cAACnQ,EAAA,EAAD,CAAQR,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAYxB,GAA8ByB,QAAS,WAAK+P,GAAkBrN,EAAO4B,WAAW0L,EAAoBD,GAAkBC,EAAoBD,EAAiB,IAApO,kBAEJ,cAACnQ,EAAA,EAAD,CAAQC,SAA4B,GAAlBkQ,EAAqB/P,QA3GH,2CA2GuBZ,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAYxB,GAA5H,8BAGJ,qBAAKa,MAAO,CAACmI,QAAQ,QAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,6BAAK/E,EAAO1B,SAAS0G,YACpBhF,EAAOiF,QAAQ,qBAAMC,IAAKxH,EAAwBqG,MAAM,MAAMoB,OAAO,QAAQ,qBAAMD,IAAKzH,EAAgBsG,MAAM,MAAMoB,OAAO,QAC5H,qBAAMzI,MAAO,CAAC0I,WAAW,SAAUC,UAAU,SAASC,QAAQ,GAAIJ,IAAK1H,EAAgB,IAAMwC,EAAO1B,SAASI,UAAWqF,MAAM,KAAKoB,OAAO,UAE9I,eAACJ,EAAA,EAAD,WACI,oBAAGrI,MAAOgH,EAAV,wBAAiC1D,EAAOJ,YACxC,oBAAGlD,MAAOgH,EAAV,qBAA8B1D,EAAO2B,UACrC,oBAAGjF,MAAOgH,EAAV,6BAAsC1D,EAAOd,aAC7C,oBAAGxC,MAAOgH,EAAV,2BAAoC1D,EAAO6B,YAA3C,QACA,oBAAGnF,MAAOgH,EAAV,8BAAuClB,KACvC,oBAAG9F,MAAOgH,EAAV,+BAAwC1D,EAAO4B,cAC/C,8BAAG,2CAAqB5B,EAAOiF,QAAQ,2CAAqB,4CAC3DjF,EAAO2B,OAAO6D,eAAezJ,EAAMT,QAAQkK,eAAiB,cAACtI,EAAA,EAAD,CAAQI,QA5FzF,WACIqF,GAAe,IA2F0FjG,MAAO,CAACU,gBAAgBvB,EAA6BwB,YAAaxB,GAA9F,gDA/HrF6J,IAAMC,cAAc,SCwFLgI,OApGf,SAAqB5R,GAEjB,MAAoCC,mBAAgB,IAApD,mBAAO4R,EAAP,KAAmBC,EAAnB,KACA,EAA0C7R,mBAAc,GAAxD,mBACA,GADA,UAC4BA,mBAAc,CAAC,GAAI,GAAI,MAAnD,mBACA,GADA,UAC0CA,mBAAc,OAAxD,mBAmDA,OAnDA,UAIAC,qBAAU,WACNyE,EAAiB3E,EAAMhB,KAAMgB,EAAM4E,UAAU6C,MAAK,SAACnF,GAC/C1D,QAAQM,IAAIoD,GACZwP,EAAcxP,EAAKyP,QAAO,SAAAC,GAEtB,OADApT,QAAQM,IAAI8S,EAAEnM,YACS,GAAhBmM,EAAEnM,eAEb,IANwD,EAMlDoM,EAAY,GANsC,eAOrCJ,GAPqC,IAOxD,2BAA+B,CAAC,IAAvB5N,EAAsB,QAC3BrF,QAAQM,IAAI,sBAAuB+E,GACnCgO,EAAUlM,KAAK9B,EAAO0B,UAT8B,oCAY9D,IAmCA,gCACI,6CACF,qBAAMhF,MAAO,CAAC,MAAS,OAAQ,WAAc,UAA7C,SACKkR,GAAcA,EAAWjG,KAAI,SAAC6F,EAAetM,GAC1C,OAAQ,8BACA,cAACkM,GAAD,CAAyBI,WAAYA,EAAYlS,QAASS,EAAMT,QAASqF,SAAU5E,EAAM4E,UAAnEO,cCF/B+M,OArDf,WAEI,MAAwBjS,mBAAc,MAAtC,mBAAOjB,EAAP,KAAamT,EAAb,KACA,EAA8BlS,mBAAc,MAA5C,mBAAO8M,EAAP,KAAgBqF,EAAhB,KACA,EAA8BnS,mBAAc,MAA5C,mBAAOV,EAAP,KAAgB8S,EAAhB,KACA,EAAgCpS,mBAAc,MAA9C,mBAAO2E,EAAP,KAAiB0N,EAAjB,KACA,EAAgDrS,oBAAkB,GAAlE,mBAAOsS,EAAP,KAAyBC,EAAzB,KAEMrS,EAAa,CAACnB,EAAMO,EAASwN,EAASwF,GACtClS,EAAsB,CAAC8R,EAASE,EAAYD,GAmBpD,OAfElS,qBAAU,WAEN,GADAtB,QAAQM,IAAI,eAAgB6N,GAChB,OAATA,EACCyF,GAAoB,OAEjB,CACHA,GAAoB,GACpB,IAAMC,EAAOC,EAAiCD,IAExC7N,EAAgB,IAAI5F,EAAKQ,IAAImT,SAASF,EADpBG,8CAExBN,EAAY1N,MAEjB,CAACmI,EAASxN,IAIb,qBAAKoB,MAAO,CAACqH,MAAM,QAAnB,SACI,eAAC,IAAD,WACI,qBAAKrH,MAAO,CAACgL,aAAa,QAA1B,SACA,cAAC5L,EAAD,CAAiBM,oBAAqBA,EAAqBF,WAAYA,MAIvE,eAAC,IAAD,WACI,cAAC,IAAD,CAAQgC,KAAK,IAAIkD,QAAS,cAAC,GAAD,CAAM9F,QAASA,EAASwN,QAASA,EAASnI,SAAUA,MAE9E,cAAC,IAAD,CAAOzC,KAAK,eAAekD,QAAS,cAAC,GAAD,CAAc9F,QAASA,EAASwN,QAASA,EAASnI,SAAUA,EAC5CiO,IAAI,0EACxD,cAAC,IAAD,CAAO1Q,KAAK,UAAUkD,QAAS,cAAC,GAAD,CAAQ9F,QAASA,EAASwN,QAASA,EAASnI,SAAUA,MACrF,cAAC,IAAD,CAAOzC,KAAK,aAAakD,QAAS,cAAC,GAAD,CAAW9F,QAASA,EAASwN,QAASA,EAASnI,SAAUA,MAG3F,cAAC,IAAD,CAAOzC,KAAK,wBAAwBkD,QAAS,cAAC,GAAD,CAAY9F,QAASA,EAASwN,QAASA,EAASnI,SAAUA,MACvG,cAAC,IAAD,CAAOzC,KAAK,eAAekD,QAAS,cAAC,GAAD,CAAarG,KAAMA,EAAMO,QAASA,EAASqF,SAAUA,eC/C1FkO,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBvL,MAAK,YAAkD,IAA/CwL,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,8BACF,cAAC,GAAD,QAGFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.d3c57483.chunk.js","sourcesContent":["import * as NFTicketContract from '../artifacts/contracts/NFTickets.json';\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\ndeclare const window :any;\n\nexport const MUMBAI_CONTRACT_ADDRESS = \"0x491Ff03837e433baF74BbdEbED84165888dbB1EF\";\n\n// export const PRODUCTION_MUMBAI_CONTRACT_ADDRESS = \"0xe7160776F2b517Ca27F5a9A649991F8De646701C\";\n\nexport const initContract = (web3: any, contractSetter: Function, contractDefinition: any) => {\n    const abi = contractDefinition.default.abi;\n    const contractAddress = MUMBAI_CONTRACT_ADDRESS\n    const contract: any = new web3.eth.Contract(abi, contractAddress)\n    contractSetter(contract);\n\n}\n\n\n\nexport const loadBlockchainData = async () => {\n    let web3: any;\n    let accounts: string[];\n    web3 = new Web3(\"http://localhost:8545\")\n    accounts = await web3.eth.getAccounts();\n    const network = await web3.eth.net.getNetworkType()\n    return {\"web3\":web3,\"network\":network,\"accounts\":accounts}\n}\n\n\n\nexport const connectWallet = async (web3UpdateFunction:any, accountUpdateFunction:any, chainUpdateFunction:any) => {\n    let provider : any;\n    let web3: any;\n    let accounts: string[] = [];\n    let chainId: any;\n\n\n    // Initiate the Web3 Provider\n    provider = await detectEthereumProvider().catch((e:any) => {\n        window.alert(e.message);\n        console.warn(\"Unable to find waller\");\n    })\n\n    // Set Web3\n    if (provider === window.ethereum) {\n        web3 = new Web3(provider);\n        console.log(\"Metamask is installed! \");\n    } else {\n        web3 = new Web3(\"http://localhost:8545\"); // Local Ganache\n    }\n    web3UpdateFunction(web3);\n\n\n\n\n    // Set Account and change event listener\n    accounts = await provider.request({method:'eth_requestAccounts'})\n    accountUpdateFunction(accounts[0]);\n    web3.currentProvider.on('accountsChanged', (account:any)=> {\n        accountUpdateFunction(account[0]);\n    })\n        \n    // Set Network and change event listener\n    chainId = await web3.eth.getChainId();\n    chainUpdateFunction(chainId);\n    web3.currentProvider.on(\"chainChanged\", async (chain:any) => {\n        chainUpdateFunction(chain);\n    })\n\n    return Promise.all([web3, accounts, chainId]);\n}\n\n\n\nexport const processSmartContractResponseTuple = (tuple: any[]) => {\n    let key : any;\n    let ticketObj: any = new Object();\n    for (key in tuple) {\n        ticketObj[key.toString()] = tuple[key];\n    }\n    return ticketObj;\n}\n\n\n\nexport default NFTicketContract;","\n// a46385\n\nexport const ColorPalette = {\n    mainColor: \"#eccccf\",\n    secondaryColor: \"#fe47b3\",\n    green: \"#80da65\",\n    blue: \"#01a7ec\",\n    backgroundColor: \"#fa9c76\",\n    success: \"#77af63\",\n    warning: \"#ef0949\"\n\n}","import {Button, Col, Container, Nav, Navbar, NavDropdown, Row} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport React, {useEffect, useState} from \"react\";\n\nimport NFTContract, {loadBlockchainData, connectWallet, initContract} from '../modules/web3_utils';\nimport {ColorPalette} from \"../styles/color_palette\";\n\n\nexport default function NFTicketsNavbar(props: any) {\n\n\n    const [loadingBlockchainData, setLoadingBlockchainData] = useState<boolean>(false);\n    const [mumbaiIsConnected, setMumbaiIsConnected] = useState<boolean>(false);\n    const [isNetworkInvalid, setIsNetworkInvalid] = useState<boolean>(false);\n\n    useEffect(()=> {\n        console.log(\"Account changed\");\n    }, [props.web3States[1]])\n\n\n    const connectToMetamask = async()=> {\n        await connectWallet(props.maskUpdateFunctions[0],props.maskUpdateFunctions[1],props.maskUpdateFunctions[2]);\n\n    }\n\n    return (\n        <Navbar bg=\"dark\">\n            <Container>\n                <Navbar.Brand className=\"justify-content-start\" style={{color:\"white\"}} href=\"#home\">NFTickets</Navbar.Brand>\n                <Navbar.Toggle />\n                <Navbar.Collapse className=\"justify-content-end\">\n                             <Nav className=\"me-auto\">\n                                <Link  to=\"/\" className=\"mx-3 mt-6\" style={{color:\"white\"}}>Home</Link>\n                                 {(!props.web3States[3] ) && <Link to=\"events\" className=\"mx-3 mt-6\" style={{color: \"white\"}}>Events</Link>}\n                                 {!props.web3States[3] && <Link to=\"my-tickets\" className=\"mx-3 mt-6\" style={{color:\"white\"}}>My Tickets</Link>}\n                                 {!props.web3States[3] && <Link to=\"mint-tickets\" className=\"mx-3 mt-6\" style={{color:\"white\"}}>Mint NFTickets</Link>}\n                                 {!props.web3States[3] && <Link to=\"marketplace\" className=\"mx-3 mt-6\" style={{color:\"white\"}}>Marketplace</Link>}\n                                 {/*{props.web3States[1]!=null && <Link to=\"my-funds\" className=\"mx-3 mt-6\" style={{color:\"white\"}}>My Funds</Link>}*/}\n\n                              </Nav>\n                </Navbar.Collapse>\n                <Navbar.Collapse className=\"justify-content-end\">\n                    <div style={{marginRight:\"50px\", color: \"white\"}}>\n                        <div>\n                            <span >{props.web3States[0]!=null?<span >Connected</span>:<span>Not Connected</span>}</span>\n                        </div>\n                        <div>\n                            {props.web3States[1] && <span>Account: {props.web3States[1]}</span>}\n                        </div>\n                        {(props.web3States[3] && props.web3States[2]) && <div><span style={{color:\"red\"}}>Please connect to Polygon's Mumbai Testnet</span></div>}\n\n                    </div>\n                    <Button disabled={props.web3States[1]} style={{backgroundColor: ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor}} onClick={connectToMetamask}>Connect your wallet</Button>\n\n\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n\n\n)\n}\n\n\n\n// <Navbar  bg=\"light\" expand=\"lg\">\n//\n//     <Row>\n//         <Col xs={12} md={8}>\n//             <Navbar.Brand>NFTickets</Navbar.Brand>\n//\n//\n//             {/*<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />*/}\n//             {/*<Navbar.Collapse id=\"basic-navbar-nav\">*/}\n//             {/*<Nav className=\"me-auto\">*/}\n//             <Link to=\"/\" className=\"mx-3 mt-6\" style={{color:\"grey\"}}>Home</Link>\n//             <Link to=\"events\" className=\"mx-3 mt-6\" style={{color:\"grey\"}}>Events</Link>\n//             <Link to=\"my-tickets\" className=\"mx-3 mt-6\" style={{color:\"grey\"}}>My Tickets</Link>\n//             <Link to=\"mint-tickets\" className=\"mx-3 mt-6\" style={{color:\"grey\"}}>Mint NFTickets</Link>\n//\n//             {/*</Nav>*/}\n//         </Col>\n//\n//\n//         <Navbar.Collapse className=\"justify-content-end\">\n//             <Button onClick={connectToMetamask}>Connect your wallet</Button>\n//             <div>\n//                 <span>Connection state : {props.web3States[0]!=null?<span>Connected</span>:<span>Not Connected</span>}</span>\n//             </div>\n//         </Navbar.Collapse>\n//\n//         {/*</Navbar.Collapse>*/}\n//\n//     </Row>\n//\n// </Navbar>","import ipfsHttpClient, { create } from 'ipfs-http-client';\n\nexport const IPFS_NODE_URL = 'https://ipfs.infura.io:5001'\nexport const IPFS_BASE_URL = \"https://ipfs.io/ipfs\"\n\n// QmYEowFCRGFsuzhhwMdijZ1sqUfZd28gcJ7bx3Vydgso9x Old image\n\nexport const BASE_IMAGE_HASH = \"QmTyPBRhmbaoyzP8HaqK1JyqKNhkaTZXJpTsfe58bot6wb\";\n\nexport const EXPIRED_IMAGE_HASH = \"QmYZe4QX6UEB26GaN4vR3UHXnaHtwgW4d1a77zvrGae6te\"\n\nexport const BASE_IMAGE_URL = `${IPFS_BASE_URL}/${BASE_IMAGE_HASH}`\n\nexport const BASE_EXPIRED_IMAGE_URL = `${IPFS_BASE_URL}/${EXPIRED_IMAGE_HASH}`\n\n\nconst ipfsClient = create({url: IPFS_NODE_URL})\n\n\nexport const uploadToIPFS = async (file:any) => {\n    const added = await ipfsClient.add(file)\n    console.log(\"File uploaded to ipfs\");\n    const url = `${IPFS_NODE_URL}/${added.path}`\n    console.log(\"Image url is: \", url);\n    return added.path;\n}\n\n\nexport const downloadFromIPFS = async (url: string) => {\n\n\n}\n\n\nexport default ipfsClient;","import {uploadToIPFS} from \"./ipfs_utils\";\n\n\nexport const mintNFTicket = async (nftContract: any, account: string, data: any, metadata: any, expirationDateTimestamp: Date, badge: any) => {\n    // Store info on ipfs\n    console.log(\"Received metadata: \", metadata);\n    console.log(\"Received image: \", badge);\n    console.log(\"Received date: \", expirationDateTimestamp.getTime());\n    const badge_uri = await uploadToIPFS(badge);\n    console.log(\"badge_uri: \", badge_uri);\n    metadata.badge_uri = badge_uri;\n    const metadataDoc = JSON.stringify(metadata);\n    const metadata_url = await uploadToIPFS(metadataDoc);\n    console.log(\"Metadata url: \", metadata_url);\n    console.log(\"Making request with account: \", account);\n    return await nftContract.methods.createEventTickets(data.unitPrice,data.maxSupply,data.percentageOnResale, expirationDateTimestamp.getTime(),metadata_url).send({from: account})\n\n}\n\n\nexport const subscribeTicketsUpdated = (nftContract: any) => {\n    nftContract.events.TicketsUpdated(null, (data: any)=> {\n        console.log(\"Tickets updated\");\n        console.log(\"Data is: \", data);\n    });\n}\n\n\nexport const getInterval = async (nftContract: any) => {\n    const interval = await nftContract.methods.interval.call().call();\n    console.log(\"Interval is: \", interval);\n}\n\nexport const getkeeperVerificationCounter = async (nftContract: any) => {\n    const counter = await nftContract.methods.keeperVerificationCounter.call().call();\n    console.log(\"Counter value is: \", counter)\n}\n\nexport const getUpdatesCounter = async (nftContract: any) => {\n    const counter = await nftContract.methods.updatesCounter.call().call();\n    console.log(\"Counter value is: \", counter)\n}\n\n\nexport const getOwnedTickets = async (nftContract: any, account: string) => {\n    const ownedTickets = await nftContract.methods.getOwnedTickets(account).call();\n    return ownedTickets;\n}\n\nexport const getAllEvents = async (nftContract: any, account: string) => {\n    const events = await nftContract.methods.getAllEvents().call();\n    return events;\n}\n\n\nexport const numTicketsOwned = (nftContract: any, index: number, account: string) => {\n    nftContract.methods.numTicketsOwned(index).send({from: account})\n        .then((response: any)=> {\n            console.log(\"Number of tickets: \", response);\n        })\n}\n\n\nexport const balanceOf = async (nftContract: any, account: any, ticketId: any) => {\n    const balance = await nftContract.methods.balanceOf(account, ticketId).call();\n    return balance;\n}\n\nexport const getTicket = async (nftContract: any, ticketId: any) => {\n    const ticket = await nftContract.methods.nfTickets(ticketId).call();\n    return ticket;\n}\n\nexport const buyTickets = async (nftContract: any, ticketId: any, amount: number, account: any, amountToPay: number) => {\n    return await nftContract.methods.buyFromOwner(ticketId, amount).send({from: account, value: amountToPay});\n}\n\nexport const getMaticPrice = async (nftContract: any) => {\n    return await nftContract.methods.getMaticPrice().call();\n}\n\nexport const getRevenue = async (nftContract: any, account: any) => {\n    return await nftContract.methods.getRevenue(account).call();\n}\n\nexport const withdrawFunds = async (nftContract: any, account: any) => {\n    return await nftContract.methods.withdrawProceeds().send({from:account});\n\n}\n\nexport const getResaleTickets = async(web3:any, contract: any) => {\n    let resaleTickets = [];\n    const eventList = await contract.getPastEvents(\"TicketOnResale\", {\n            fromBlock:  await web3.eth.getBlockNumber() - 950,\n            toBlock: \"latest\",\n          }).catch((e: any) => window.alert(e));\n\n\n    for (let i=0; i<eventList.length; i++){\n        const element = eventList[i][\"returnValues\"];\n\n        // console.log(element);\n\n        const resale = await contract.methods[\"resale(uint256,address)\"](element._tokenId, element._seller).call();\n        // console.log(resale);\n        if (resale.num !== 0) {\n            const obj = {\n                tokenId: element._tokenId,\n                seller: element._seller,\n                numTickets: resale.num,\n                resalePrice: resale.resalePrice\n            }\n            // console.log(obj);\n\n\n            resaleTickets.push(obj);\n        }\n        // console.log(resaleTickets)\n    }\n    return resaleTickets;\n}","import React, {useEffect, useState} from \"react\";\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\nimport {BASE_EXPIRED_IMAGE_URL, BASE_IMAGE_URL, IPFS_BASE_URL} from \"../modules/ipfs_utils\";\nimport {balanceOf, getResaleTickets} from \"../modules/nfticket_utils\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport Modal from 'react-modal';\n\n\nconst modalStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n    },\n};\n\nModal.setAppElement('#root');\n\nexport default function TicketDisplay(props: any) {\n\n    const [balance, setBalance] = useState<any>(0);\n    const [formatedDate, setFormatedDate] = useState<any>(null);\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    const [resellAmountCounter,setResellAmountCounter] = useState(0);\n    const [resalePrice, setResalePrice] = useState(null);\n\n\n    useEffect(()=> {\n        getExipirationDateFromTimestamp(props.ticket.expirationDateTimestamp);\n\n    },[])\n\n    const getExipirationDateFromTimestamp = (timestamp: number) => {\n        var date = new Date(timestamp *1);\n        var datePieces = date.toString().split(\" \");\n        var formattedDate = datePieces[0] + \" \" + datePieces[1] + \" \" + datePieces[2] + \" \" + datePieces[3]\n        setFormatedDate(formattedDate);\n    }\n\n    const getBalance = async () => {\n        const _balance = await balanceOf(props.contract, props.account, props.ticket.ticketId);\n        setBalance(_balance)\n\n    }\n\n    useEffect(()=> {\n        const _balance = getBalance().then(()=>{})\n        console.log(\"Balance is: \", balance);\n        console.log(\"Ticket owner: \", props.ticket.owner);\n        console.log(\"Account: \", props.account);\n        console.log(\"Own? \", props.account == props.ticket.owner);\n    },[])\n\n    async function resellTicket() {\n        setModalIsOpen(false);\n        const success = await props.contract.methods[\"putOnResale(uint256,uint256,uint256)\"](...[props.ticket.ticketId,resellAmountCounter,resalePrice]).send({from: props.account});\n\n        if (success){\n            window.alert(\"Transaction Successful!\")\n        } else {\n            window.alert(\"Transaction Failed!\")\n        }\n    }\n\n    function closeModal() {\n        setModalIsOpen(false);\n        console.log(\"Received info: \", resalePrice, \" and amount: \", resellAmountCounter);\n    }\n    function openModal() {\n        setModalIsOpen(true);\n    }\n\n    function changeResalePrice(event: any) {\n        console.log(\"Event value is: \", event.target.value);\n        setResalePrice(event.target.value);\n    }\n\n\n\n    const infoStyle = {\n        fontSize:\"1.2em\",\n\n    }\n\n    // getBalance().then((b)=>console.log(\"Received balance: \", b));\n\n    return (<div className=\"mt-2\" style={{border: '2px solid rgba(0, 0, 0, 0.5)', margin:\"20px\",\n                    borderRadius:'10px', backgroundColor: ColorPalette.mainColor, width:\"80%\"}}>\n        <Modal\n            isOpen={modalIsOpen}\n            onRequestClose={closeModal}\n            style={modalStyles}\n            contentLabel=\"Resell Tickets\"\n        ><div>\n            <h4>Resell Tickets</h4>\n            <Form className=\"mt-3\" >\n                <Form.Group className=\"mb-3\" controlId=\"formEventName\">\n                    <Form.Label>Resale price</Form.Label>\n                    <Form.Control type=\"resale_price\" placeholder=\"Resale price ($)\" onChange={changeResalePrice}/>\n                </Form.Group>\n            </Form>\n            <span>Amount: {resellAmountCounter}</span>\n            <div>\n                <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor, marginRight:\"20px\"}} onClick={()=>{resellAmountCounter==0?setResellAmountCounter(resellAmountCounter):setResellAmountCounter(resellAmountCounter-1)}}>-</Button>\n                <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor}} onClick={()=>{resellAmountCounter==balance?setResellAmountCounter(resellAmountCounter):setResellAmountCounter(resellAmountCounter+1)}}>+</Button>\n            </div>\n            <Button disabled={resalePrice==null || resellAmountCounter==0} onClick={resellTicket} style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor}}>Set tickets for resale</Button>\n        </div>\n        </Modal>\n        {props.ticket != null &&\n        <div style={{padding:\"10px\"}}>\n            <Row>\n                <Col>\n                    <h2>{props.ticket.metadata.eventName}</h2>\n                    {props.ticket.expired?<img  src={BASE_EXPIRED_IMAGE_URL} width=\"400\" height=\"300\"/>:<img  src={BASE_IMAGE_URL} width=\"400\" height=\"300\"/>}\n                    <img  style={{marginLeft:\"-370px\", marginTop:\"-170px\",zIndex:-1}} src={IPFS_BASE_URL + \"/\" + props.ticket.metadata.badge_uri} width=\"80\" height=\"80\"/>\n                </Col>\n                <Col>\n\n                    <p style={infoStyle}>Ticket Id: {props.ticket.ticketId}</p>\n                    <p style={infoStyle}>Maximum supply: {props.ticket.maxSupply}</p>\n                    <p style={infoStyle}>Price: {props.ticket.tokenSalePrice} $</p>\n                    <p style={infoStyle}>Expiration date: {formatedDate}</p>\n                    <p style={infoStyle}>Balance: {balance}</p>\n                    <p><span>State: </span>{props.ticket.expired?<span>Expired</span>:<span>Valid</span>}</p>\n                    {props.ticket.owner.toUpperCase()==props.account.toUpperCase()?<p>Minted by me!</p>:<p>Usable</p>}\n                    {(props.allowResell && props.ticket.owner.toUpperCase()!=props.account.toUpperCase()) && <Button onClick={openModal} style={{backgroundColor:ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor}}>Resell Tickets</Button>}\n                </Col>\n            </Row>\n        </div>}\n    </div>)\n\n}","import {SpinnerDotted} from \"spinners-react\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport React from \"react\";\n\n\nconst NFTicketSpinner = (props:any) => {\n\n    return(\n        <div className=\"align-content-center\" style={{width:\"100%\"}}>\n            <SpinnerDotted size={props.spinnerSize?props.spinnerSize:\"60\"} color={ColorPalette.secondaryColor}/>\n            <span style={{color:ColorPalette.secondaryColor,  marginLeft:\"20px\"}}>{props.message}</span>\n        </div>\n    )\n\n\n}\n\nexport default NFTicketSpinner;","import React, {useEffect, useState} from \"react\";\nimport {getOwnedTickets} from \"../modules/nfticket_utils\";\nimport {Button} from \"react-bootstrap\";\nimport {IPFS_NODE_URL} from \"../modules/ipfs_utils\";\nimport TicketDisplay from \"./TicketDisplay\";\nimport axios from \"axios\";\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\nconst MyTickets = (props: any) => {\n\n        const [myTickets, setMyTickets] = useState<any>([]);\n        const [loading, setLoading] = useState<boolean>(false);\n\n\n\n    useEffect(()=> {\n        setLoading(true);\n\n            loadTickets()\n                .then((data)=> {\n                    setLoading(false);\n                    console.log(\"Got tickets: \", data);\n                })\n        },[])\n\n\n    const processIpfsString = (str: string) => {\n            const str1 = str.split(\"{\")[1];\n            const str2 = str1.split(\"}\")[0]\n            const finalStirng = \"{\" + str2 + \"}\";\n            console.log(\"Final string is: \", str2);\n            return finalStirng;\n    }\n\n\n    const loadTickets = async() => {\n        console.log(\"Loading Tickets...\");\n\n        let scTickets: any[] = await getOwnedTickets(props.contract, props.account);\n        let processedScTickets : any[] = [];\n        for(let a = 0; a<scTickets.length; a++) {\n            let key : any;\n            let ticketObj: any = new Object();\n            for (key in scTickets[a]) {\n            ticketObj[key.toString()] = scTickets[a][key];\n            }\n            processedScTickets.push(ticketObj);\n        }\n\n        for(let i = 0; i< processedScTickets.length; i++) {\n            // const ticket = Object.fromEntries(scTickets[i])\n            const ticket:any = processedScTickets[i];\n            const urlPieces = ticket.metadataURI.split(\"/\");\n            const uriPt1 = urlPieces[urlPieces.length -1];\n            const finalUrl = IPFS_NODE_URL + \"/api/v0/object/get?arg=\" + uriPt1 + '&data-encoding=text';\n            const ticketRawMetadata = await axios.post(finalUrl);\n            const ticketMetadata = JSON.parse(processIpfsString(ticketRawMetadata.data.Data));\n            processedScTickets[i] = Object.assign(processedScTickets[i], {metadata: ticketMetadata});\n        }\n        setMyTickets(processedScTickets)\n\n    }\n\n    return (<div>\n        <h2 style={{marginBottom:\"50px\"}}>My Tickets</h2>\n        {/*<Button onClick={loadTickets}>Load Tickets</Button>*/}\n        {loading && <NFTicketSpinner message=\"Loading ticket collection...\" spinnerSize=\"100\"></NFTicketSpinner>}\n\n\n        {myTickets != null && myTickets.map((ticket:any, idx: number) => {\n            console.log(\"Ticket is: \", ticket);\n                return <TicketDisplay  key={idx} ticket={ticket} account={props.account} contract={props.contract} allowResell={true}/>\n            })}\n    </div>)\n}\n\n\nexport default MyTickets;","import React, {useEffect, useState} from \"react\";\nimport {getMaticPrice, getRevenue, withdrawFunds} from \"../modules/nfticket_utils\";\nimport {Button} from \"react-bootstrap\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\nconst MyFunds = (props: any) => {\n\n    const [funds, setFunds] = useState<number>(0);\n    const [maticPrice, setMaticPrice] = useState<number>(0);\n    const [withdrawSuccessful, setWithdrawSuccessful] = useState<boolean>(false);\n    const [withdrawError, setWithdrawError] = useState<boolean>(false);\n\n    const [withdrawing, setWithdrawing] = useState<boolean>(false);\n\n\n    const _getRevenue = () => {\n        getRevenue(props.contract, props.account)\n            .then(r=>{\n                setFunds(Math.round(r*10**-18*100)/100);\n                console.log(\"Revenue: \", r)});\n    }\n\n    useEffect(()=> {\n        getMaticPrice(props.contract)\n            .then(r=> {\n                setMaticPrice(Math.round(r*10**-8*100)/100);\n            })\n\n        _getRevenue();\n    },[])\n\n    const _withdrawFunds = () => {\n        setWithdrawing(true);\n        withdrawFunds(props.contract, props.account)\n            .then(()=>{\n                setWithdrawing(false);\n                setWithdrawSuccessful(true);\n                _getRevenue();\n                setTimeout(()=>{\n                    setWithdrawSuccessful(false);\n                },4000)\n\n            })\n            .catch(()=>{\n                setWithdrawing(false);\n                setWithdrawError(true);\n                setTimeout(()=>{\n                    setWithdrawError(false);\n                },4000)\n            })\n    }\n\n    return (<div>\n        <h1>My Funds</h1>\n        <div style={{marginTop:\"20px\"}}>\n            <span style={{fontSize:\"1.2em\"}}>Current funds: {Math.round(funds*maticPrice*100)/100} $ ({funds}) MATIC</span>\n        </div>\n        <div style={{marginTop:\"10px\"}}>\n            { !withdrawing && !(withdrawError || withdrawSuccessful) &&<Button disabled={funds===0} style={{backgroundColor: ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor}} onClick={_withdrawFunds}>Withdraw funds</Button>}\n            {withdrawError && <span style={{color:ColorPalette.warning, fontSize:\"1.3em\"}}>Something went wrong while withdrawing your funds</span>}\n            {withdrawSuccessful && <span style={{color:ColorPalette.success, fontSize:\"1.3em\"}}>Funds successfully withdrawn! </span>}\n            {withdrawing && <NFTicketSpinner message=\"Getting your NFTickets ready!\"/>}\n        </div>\n    </div>)\n\n}\n\n\nexport default MyFunds;","import React, {useEffect, useState} from \"react\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport {Col, Row} from \"react-bootstrap\";\nimport MyFunds from \"./MyFunds\";\n\n\nfunction Home(props: any) {\n\n\n    return (\n            <div  className=\"container-fluid\">\n                <Row>\n                    <Col >\n                <h1>Welcome to NFTickets</h1>\n                        <div >\n                <h3>Emission platform and Marketplace for NFT based Tickets</h3>\n                        <div  style={{marginTop:\"5%\"}}>\n                            <span style={{fontSize:\"1.3em\"}}>Start emitting your event tickets today!</span>\n                            <ul style={{fontSize:\"1.3em\"}}>\n\n                    <li>Connect to Mumbai Testnet</li>\n                    <li>Mint your own tickets</li>\n                    <li>Buy Tickets for your favorite events!</li>\n                </ul>\n                        </div>\n                        </div>\n                    </Col>\n                    <Col>\n                        {props.contract &&\n                        <MyFunds account={props.account} network={props.network} contract={props.contract}/>\n                        }\n                    </Col>\n                </Row>\n            </div>\n    );\n}\n\nexport default Home;\n","import React, {useRef, useEffect, useState} from 'react'\nimport {BASE_IMAGE_URL, uploadToIPFS} from '../modules/ipfs_utils';\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\nimport {getInterval, getkeeperVerificationCounter, getUpdatesCounter, mintNFTicket} from \"../modules/nfticket_utils\";\n// @ts-ignore\nimport DatePicker from \"react-datepicker\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { SpinnerDiamond, SpinnerInfinity, SpinnerDotted } from 'spinners-react';\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\nconst TicketCanvas = (props:any) => {\n\n    console.log(\"Received props: \", props);\n    const [badgerUrl,setBadgerUrl] = useState<any>(null);\n    const [uploadedBadgeUrl, setUploadedBadgeUrl] = useState<any>(null);\n    const [currentBadgeFile, setCurrentBadgeFile] = useState<any>(null);\n    const [badger, setBadger] = useState<any>(null)\n    const canvasRef = useRef(null)\n    const imageRef = useRef(null)\n    const badgeRef = useRef(null)\n\n    //Form states\n    const [eventMetadata, setEventMetadata] = useState<any>({});\n    const [eventData, setEventData] = useState<any>({});\n    const [expirationDateTimestamp, setExpirationDateTimestamp] = useState(new Date());\n    const [minting, setMinting] = useState<boolean>(false);\n\n    const [mintingError, setMintingError] = useState<boolean>(false);\n    const [mintingSuccessful, setMintingSuccessful] = useState<boolean>(false);\n\n\n\n    const styles = {\n        border: '2px solid rgba(0, 0, 0, 0.5)',\n        borderRadius:'10px',\n        margin:'20px',\n        width:'98%',\n        // padding:'20px',\n        marginBottom:'50px'\n    };\n\n    const drawTicket = (canvas: any, image:any, badge: any) => {\n\n        const ctx = canvas.getContext('2d')\n        ctx.canvas.width = image.width\n        ctx.canvas.height = image.height\n        ctx.drawImage(image,0,0);\n        if (badge !== null) {\n            ctx.drawImage(badge, image.width/4 - badge.width/2, image.height/3-badge.height/2, 200, 200)\n            printMetadata(canvas, image);\n        }\n    }\n\n\n    const printMetadata = (canvas: any, image:any) => {\n        const ctx = canvas.getContext('2d')\n        const startX = image.width/10;\n        const startY = image.height-(image.height/6);\n        const increment = 40;\n        ctx.font = \"22pt Calibri\";\n        ctx.fillText(`Event name: ${eventMetadata.eventName?eventMetadata.eventName:'-'}`, startX, startY )\n        ctx.fillText(`Unit price: ${eventData.unitPrice?eventData.unitPrice+' $':'-'}`, startX, startY + 1*increment)\n        ctx.fillText(`Max supply: ${eventData.maxSupply?eventData.maxSupply:'-'}`, startX, startY + 2*increment)\n        ctx.fillText(`Percentage on resale: ${eventData.percentageOnResale?eventData.percentageOnResale:'-'}`, startX, startY + 3*increment)\n\n\n    }\n\n\n    const onImageChange = async (event:any) => {\n        console.log(\"Image changed!\");\n        if (event.target.files && event.target.files[0]) {\n            let file = event.target.files[0];\n            const local_url = URL.createObjectURL(file);\n            console.log(local_url)\n            // Set badger file\n            setCurrentBadgeFile(file);\n            // Set local url for\n            setUploadedBadgeUrl(local_url);\n            setBadger(badgeRef.current);\n        }\n    };\n\n    const saveTicket = async () => {\n        const url = await uploadToIPFS(currentBadgeFile);\n        setBadgerUrl(url);\n        setBadger(badgeRef.current);\n        // Save on smart contract\n\n    }\n\n\n    const updateImage = () => {\n        const canvas : any = canvasRef.current\n        const image : any = imageRef.current\n        console.log(\"Will draw with badger: \", badger);\n        drawTicket(canvas, image, badger);\n    }\n\n    const changeEventNameHandler = (event:any) => {\n        setEventMetadata(Object.assign(eventMetadata,{\"eventName\": event.target.value}));\n        console.log(\"Metadata now is: \", eventMetadata);\n        updateImage()\n    }\n\n    const changeEventUnitPriceHandler = (event:any) => {\n        setEventData(Object.assign(eventData,{\"unitPrice\": event.target.value}));\n        console.log(\"Metadata now is: \", eventData);\n        updateImage()\n    }\n\n    const changeEventMaxSupplyHandler = (event:any) => {\n        setEventData(Object.assign(eventData,{\"maxSupply\": event.target.value}));\n        console.log(\"Metadata now is: \", eventData);\n        updateImage()\n    }\n\n    const changeEventResalePercHandler = (event: any) => {\n        setEventData(Object.assign(eventData,{\"percentageOnResale\": event.target.value}));\n        updateImage()\n    }\n\n    useEffect(() => {\n        console.log(\"Running use effect\")\n        const canvas : any = canvasRef.current\n        const image : any = imageRef.current\n        // const badge : any = badgeRef.current\n        drawTicket(canvas, image, badger);\n    }, [])\n\n    const _mintNFTicket = () => {\n        setMinting(true);\n        mintNFTicket(props.contract, props.account, eventData, eventMetadata, expirationDateTimestamp,currentBadgeFile)\n            .then(()=> {\n                setMinting(false);\n                setMintingSuccessful(true);\n                setTimeout(()=>{\n                    setMintingSuccessful(false);\n\n                }, 4000)\n            })\n            .catch(()=>{\n                setMinting(false);\n                setMintingError(true);\n                setTimeout(()=>{\n                    setMintingError(false);\n                }, 4000)\n            })\n\n    }\n\n\n\n    return (\n        <Container fluid className=\"justify-content-md-center\" style={styles}>\n            <h3>Ticket Editor</h3>\n            <Row>\n                <Col>\n                    <canvas className=\"align-self-center\" ref={canvasRef} {...props}/>\n                    <img ref={imageRef} src={BASE_IMAGE_URL} hidden={true} />\n                    <img ref={badgeRef} src={uploadedBadgeUrl} hidden={true} />\n                </Col>\n\n                <Col>\n                    <Row>\n                        <h4>Ticket badge</h4>\n                        <label className=\"mx-3\">Choose file: </label>\n                        <input type=\"file\" name=\"myImage\" onChange={onImageChange} />\n                    </Row>\n                    <Form className=\"mt-3\" style={{width:\"80%\"}}>\n                        <h4>Ticket metadata</h4>\n                        <Form.Group className=\"mb-3\" controlId=\"formEventName\">\n                            <Form.Label>Event name</Form.Label>\n                            <Form.Control type=\"event_name\" placeholder=\"Enter event name\" value={eventMetadata.eventName} onChange={changeEventNameHandler}/>\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formUnitPrice\">\n                            <Form.Label>Unit Price ($)</Form.Label>\n                            <Form.Control type=\"unit_price\" placeholder=\"Uni price in dollars\"  value={eventMetadata.unitPrice} onChange={changeEventUnitPriceHandler}/>\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formMaxSupply\">\n                            <Form.Label>Maximum supply</Form.Label>\n                            <Form.Control type=\"max_supply\" placeholder=\"Maximum ticket supply\" value={eventMetadata.maxSupply} onChange={changeEventMaxSupplyHandler}/>\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formMaxSupply\">\n                            <Form.Label>Percentage on resale</Form.Label>\n                            <Form.Control type=\"perc_resale\" placeholder=\"Percentage on resale\" value={eventMetadata.percentageOnResale} onChange={changeEventResalePercHandler}/>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"expirationDate\">\n                            <Form.Label>Event Date</Form.Label>\n                        <DatePicker selected={expirationDateTimestamp} onChange={(date: any) => setExpirationDateTimestamp(date)} />\n                        </Form.Group>\n                    </Form>\n                    <Row className=\"mt-3\">\n                        {!minting && !(mintingError || mintingSuccessful) && <Button style={{backgroundColor: ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor, width:\"80%\"}} onClick={_mintNFTicket}>Mint tickets</Button>}\n\n                        {mintingError && <span style={{color: ColorPalette.warning, fontSize:\"1.3em\"}}>Something went wrong while minting your tickets</span>}\n                        {mintingSuccessful && <span style={{color: ColorPalette.success , fontSize:\"1.3em\"}}>NFTickets successfully minted! </span>}\n\n                        {minting && <NFTicketSpinner message=\"Minting your NFTickets...\"/>}\n\n\n                    </Row>\n                </Col>\n                </Row>\n            {/*<div>*/}\n            {/*    <Button onClick={()=> getInterval(props.contract)}>Interval</Button>*/}\n            {/*    <Button onClick={()=> getUpdatesCounter(props.contract)}>Updates counter</Button>*/}\n            {/*    <Button onClick={()=> getkeeperVerificationCounter(props.contract)}>Keeper verifications</Button>*/}\n            {/*</div>*/}\n        </Container>)\n}\n\n\nexport default TicketCanvas;","import React, {useEffect, useState} from \"react\";\nimport {Button, Col, Row} from \"react-bootstrap\";\nimport {BASE_EXPIRED_IMAGE_URL, BASE_IMAGE_URL, IPFS_BASE_URL} from \"../modules/ipfs_utils\";\nimport {balanceOf, getInterval} from \"../modules/nfticket_utils\";\nimport { useNavigate } from 'react-router-dom';\nimport {ColorPalette} from \"../styles/color_palette\";\n\n\nexport default function EventDisplay(props: any) {\n\n    const [availableForSale, setAvailableForSale] = useState<any>(0);\n    const [formatedDate, setFormatedDate] = useState<any>(null);\n\n    const navigate = useNavigate();\n\n    const getAvailableForSale = async () => {\n        const _availableForSable = await balanceOf(props.contract, props.ticket.owner, props.ticket.ticketId);\n        setAvailableForSale(_availableForSable)\n    }\n\n    useEffect(()=> {\n\n            var date = new Date(props.ticket.expirationDateTimestamp *1);\n            var datePieces = date.toString().split(\" \");\n            var formattedDate = datePieces[0] + \" \" + datePieces[1] + \" \" + datePieces[2] + \" \" + datePieces[3]\n            setFormatedDate(formattedDate);\n\n    },[])\n\n    const routeChange=()=> {\n        let path = `../buy-ticket/${props.ticket.ticketId}`;\n        navigate(path);\n    }\n\n    const infoStyle = {\n        fontSize:\"1.2em\",\n\n    }\n\n    return (<div className=\"mt-2\"style={{border: '2px solid rgba(0, 0, 0, 0.5)', margin:\"20px\",\n        borderRadius:'10px', backgroundColor: ColorPalette.mainColor, width:\"80%\"}}>\n        <div style={{padding:\"10px\"}}>\n            <Row>\n                <Col>\n                    <div style={{marginLeft:\"10%\"}}>\n                    <h2>{props.ticket.metadata.eventName}</h2>\n                    <img  src={IPFS_BASE_URL + \"/\" + props.ticket.metadata.badge_uri} width=\"200\" height=\"200\"/>\n                    {props.ticket.expired?<h3>Not for sale</h3>:null}\n                    </div>\n                </Col>\n                <Col>\n\n                    <p style={infoStyle}>Tickets for sale: {availableForSale}</p>\n                    <p style={infoStyle}>Price: {props.ticket.tokenSalePrice} $</p>\n                    <p style={infoStyle}>Event date: {formatedDate}</p>\n                    <p style={infoStyle}>Maximum supply: {props.ticket.maxSupply}</p>\n                    <p style={infoStyle}><span>State: </span>{props.ticket.expired?<span>Expired</span>:<span>Valid</span>}</p>\n                    {!props.ticket.expired && props.ticket.owner.toUpperCase()!=props.account.toUpperCase()?<Button style={{backgroundColor: ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor}} onClick={routeChange}>Buy Tickets</Button>:null}\n\n\n\n                    {/*<img  style={{marginLeft:\"-370px\", marginTop:\"-170px\",zIndex:-1}} src={IPFS_BASE_URL + \"/\" + props.ticket.metadata.badge_uri} width=\"80\" height=\"80\"/>*/}\n                </Col>\n\n            </Row>\n        </div>\n    </div>)\n\n}","import React, {useEffect, useState} from \"react\";\nimport {getAllEvents, getOwnedTickets} from \"../modules/nfticket_utils\";\nimport {Button} from \"react-bootstrap\";\nimport {IPFS_NODE_URL} from \"../modules/ipfs_utils\";\nimport TicketDisplay from \"./TicketDisplay\";\nimport axios from \"axios\";\nimport EventDisplay from \"./EventDisplay\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\n\nconst Events = (props: any) => {\n\n    const [events, setEvents] = useState<any>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    useEffect(()=> {\n        setLoading(true);\n        loadEvents()\n            .then((data)=> {\n                setLoading(false);\n\n                console.log(\"Got tickets: \", data);\n            })\n    },[])\n\n\n    const processIpfsString = (str: string) => {\n        const str1 = str.split(\"{\")[1];\n        const str2 = str1.split(\"}\")[0]\n        const finalStirng = \"{\" + str2 + \"}\";\n        console.log(\"Final string is: \", str2);\n        return finalStirng;\n    }\n\n\n    const loadEvents = async() => {\n        console.log(\"Loading Tickets...\");\n\n        let scTickets: any[] = await getAllEvents(props.contract, props.account);\n        let processedScTickets : any[] = [];\n        for(let a = 0; a<scTickets.length; a++) {\n            let key : any;\n            let ticketObj: any = new Object();\n            for (key in scTickets[a]) {\n                ticketObj[key.toString()] = scTickets[a][key];\n            }\n            processedScTickets.push(ticketObj);\n        }\n\n        for(let i = 0; i< processedScTickets.length; i++) {\n            // const ticket = Object.fromEntries(scTickets[i])\n            const ticket:any = processedScTickets[i];\n            const urlPieces = ticket.metadataURI.split(\"/\");\n            const uriPt1 = urlPieces[urlPieces.length -1];\n            const finalUrl = IPFS_NODE_URL + \"/api/v0/object/get?arg=\" + uriPt1 + '&data-encoding=text';\n            const ticketRawMetadata = await axios.post(finalUrl);\n            const ticketMetadata = JSON.parse(processIpfsString(ticketRawMetadata.data.Data));\n            processedScTickets[i] = Object.assign(processedScTickets[i], {metadata: ticketMetadata});\n        }\n        setEvents(processedScTickets)\n    }\n\n    return (<div>\n        <h2>Events</h2>\n    {/*<Button onClick={loadEvents}>Load Tickets</Button>*/}\n        {loading && <NFTicketSpinner message=\"Loading existing events...\" spinnerSize=\"100\"></NFTicketSpinner>}\n    {events != null && events.map((ticket:any, idx: number) => {\n        console.log(\"Ticket is: \", ticket);\n        return <EventDisplay  key={idx} ticket={ticket} account={props.account} contract={props.contract}/>\n\n    })}\n    </div>)\n}\n\n\nexport default Events;","import React, {useEffect, useState} from \"react\";\nimport {getOwnedTickets, getTicket, buyTickets, getMaticPrice} from \"../modules/nfticket_utils\";\n\nimport {Button} from \"react-bootstrap\";\nimport {IPFS_NODE_URL} from \"../modules/ipfs_utils\";\nimport TicketDisplay from \"./TicketDisplay\";\nimport axios from \"axios\";\nimport {useParams} from \"react-router-dom\";\nimport {processSmartContractResponseTuple} from \"../modules/web3_utils\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport NFTicketSpinner from \"./NFTicketSpinner\";\n\n\nconst BuyTickets = (props: any) => {\n\n    const {ticketId} = useParams();\n    const [ticketCounter, setTicketCounter] = useState<number>(0);\n    const [maticPrice, setMaticPrice] = useState<any>(null);\n    const [buying, setBuying] = useState<boolean>(false);\n    const [buyingError, setBuyingError] = useState<boolean>(false);\n    const [buyingSuccess, setBuyingSuccess] = useState<boolean>(false);\n\n    console.log(\"Is is : \", ticketId);\n    console.log(\"Props: \", props);\n\n    const [ticket, setTicket] = useState<any>(null);\n\n    useEffect(()=> {\n        getMaticPrice(props.contract)\n            .then(r=> {\n                const _maticRealPrice = r*10**-8;\n                setMaticPrice(_maticRealPrice);\n                console.log(\"Received matic price: \", maticPrice);\n            })\n\n        loadTicket()\n            .then((data)=> {\n                console.log(\"Got ticket: \", ticket);\n            })\n    },[])\n\n\n    const processIpfsString = (str: string) => {\n        const str1 = str.split(\"{\")[1];\n        const str2 = str1.split(\"}\")[0]\n        const finalStirng = \"{\" + str2 + \"}\";\n        console.log(\"Final string is: \", str2);\n        return finalStirng;\n    }\n\n    const _buyTickets = () => {\n        const valueToSend = ticketCounter*ticket.tokenSalePrice / maticPrice;\n        const valueInWei = valueToSend*10**18;\n        console.log(\"Value in wei is: \", valueInWei);\n        setBuying(true);\n        buyTickets(props.contract,ticketId,ticketCounter, props.account,Math.ceil(valueInWei))\n            .then(()=>{\n                setBuying(false);\n                setBuyingSuccess(true);\n                setTimeout(()=> {\n                    setBuyingSuccess(false);\n                },4000)\n                console.log(\"Tickets successfully transfered!!\")\n            })\n            .catch(()=>{\n                setBuying(false);\n                setBuyingError(true);\n                setTimeout(()=> {\n                    setBuyingError(false);\n                },4000)\n                console.log(\"Error buying tickets\");\n            })\n\n    }\n\n\n    const loadTicket = async() => {\n        console.log(\"Loading Ticket...\");\n\n        let scTicket: any = await getTicket(props.contract,ticketId);\n        const urlPieces = scTicket.metadataURI.split(\"/\");\n        const uriPt1 = urlPieces[urlPieces.length -1];\n        const finalUrl = IPFS_NODE_URL + \"/api/v0/object/get?arg=\" + uriPt1 + '&data-encoding=text';\n        const ticketRawMetadata = await axios.post(finalUrl);\n        const ticketMetadata = JSON.parse(processIpfsString(ticketRawMetadata.data.Data));\n        scTicket = Object.assign(scTicket, {metadata: ticketMetadata});\n        setTicket(scTicket)\n    }\n\n    return (<div>\n        <h2>Buy Tickets</h2>\n        {ticket!= null && <div><TicketDisplay ticket={ticket} account={props.account} contract={props.contract}></TicketDisplay>\n        <div>\n            <h3>Order: {ticketCounter} ({ticket.metadata.eventName}) tickets</h3>\n            <h3>Amount to pay: {ticketCounter*ticket.tokenSalePrice} $</h3>\n            <h4>Value in MATIC: ~{Math.round((ticketCounter*ticket.tokenSalePrice/maticPrice)*100)/100} @ {maticPrice} USD/MATIC</h4>\n        </div>\n            {!buying && !(buyingError || buyingSuccess) &&<div style={{width:\"50%\"}}>\n            <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor, width:\"10%\", marginRight:\"20px\"}} onClick={()=>{ticketCounter==0?setTicketCounter(ticketCounter):setTicketCounter(ticketCounter-1)}}>-</Button>\n              <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor,  width:\"20%\",  marginRight:\"20px\"}} onClick={_buyTickets}>Buy</Button>\n            <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor, width:\"10%\"}} onClick={()=>{setTicketCounter(ticketCounter+1)}}>+</Button>\n        </div>}\n\n            {buyingError && <span style={{color:ColorPalette.warning, fontSize:\"1.3em\"}}>Something went wrong while with the purchase transaction</span>}\n            {buyingSuccess && <span style={{color:ColorPalette.success, fontSize:\"1.3em\"}}>NFTickets successfully purchased! </span>}\n\n            {buying && <NFTicketSpinner message=\"Getting your NFTickets ready!\"/>}\n\n        </div> }\n    </div>)\n}\n\n\nexport default BuyTickets;","import React, {useEffect, useState} from \"react\";\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\nimport {BASE_EXPIRED_IMAGE_URL, BASE_IMAGE_URL, IPFS_BASE_URL, IPFS_NODE_URL} from \"../modules/ipfs_utils\";\nimport {balanceOf, getMaticPrice, getResaleTickets, getTicket} from \"../modules/nfticket_utils\";\nimport {ColorPalette} from \"../styles/color_palette\";\nimport Modal from 'react-modal';\nimport axios from \"axios\";\n\n\nconst modalStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n    },\n};\n\nModal.setAppElement('#root');\n\nexport default function TicketForResale(props: any) {\n\n    const [balance, setBalance] = useState<any>(0);\n    const [formatedDate, setFormatedDate] = useState<any>(null);\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    const [buyAmountCounter,setBuyAmountCounter] = useState(0);\n    const [resalePrice, setResalePrice] = useState(null);\n    const [ticket, setTicket] = useState<any>(null);\n    const [ticketBuilt, setTicketBuilt] = useState<any>(false);\n    const [maticPrice, setMaticPrice] = useState<any>(null);\n\n    useEffect(()=> {\n        loadTicket()\n            .then(()=> {\n                var date = new Date(ticket.expirationDateTimestamp *1);\n                var datePieces = date.toString().split(\" \");\n                var formattedDate = datePieces[0] + \" \" + datePieces[1] + \" \" + datePieces[2] + \" \" + datePieces[3]\n                setFormatedDate(formattedDate);\n            })\n\n        getMaticPrice(props.contract)\n            .then(r=> {\n                const _maticRealPrice = r*10**-8;\n                setMaticPrice(_maticRealPrice);\n                console.log(\"Received matic price: \", maticPrice);\n            })\n    },[])\n\n\n    function closeModal() {\n        setModalIsOpen(false);\n        console.log(\"Received info: \", resalePrice, \" and amount: \", buyAmountCounter);\n    }\n    function openModal() {\n        setModalIsOpen(true);\n    }\n\n    const processIpfsString = (str: string) => {\n        const str1 = str.split(\"{\")[1];\n        const str2 = str1.split(\"}\")[0]\n        const finalStirng = \"{\" + str2 + \"}\";\n        console.log(\"Final string is: \", str2);\n        return finalStirng;\n    }\n\n    const loadTicket = async() => {\n        console.log(\"Loading Ticket...\");\n\n        let scTicket: any = await getTicket(props.contract,props.resaleInfo.tokenId);\n        const urlPieces = scTicket.metadataURI.split(\"/\");\n        const uriPt1 = urlPieces[urlPieces.length -1];\n        const finalUrl = IPFS_NODE_URL + \"/api/v0/object/get?arg=\" + uriPt1 + '&data-encoding=text';\n        const ticketRawMetadata = await axios.post(finalUrl);\n        const ticketMetadata = JSON.parse(processIpfsString(ticketRawMetadata.data.Data));\n        scTicket = Object.assign(scTicket, {metadata: ticketMetadata});\n        console.log(\"Loaded ticket: \", scTicket);\n        const fullTicket = Object.assign(scTicket, props.resaleInfo);\n        setTicket(fullTicket);\n        setTicketBuilt(true);\n    }\n\n\n    async function buyTicket() {\n        const valueToSend = buyAmountCounter*ticket.resalePrice / maticPrice;\n        console.log(\"Matic price: \", maticPrice);\n        console.log(\"Value to send: \", valueToSend);\n        const valueInWei = valueToSend*10**18;\n        console.log(\"Value in wei is: \", Math.ceil(valueInWei))\n        const success = await props.contract.methods[\"buyFromReseller(uint256,address,uint256)\"](ticket.tokenId,ticket.seller,buyAmountCounter).send({from: props.account, value:Math.ceil(valueInWei)});\n\n        if (success){\n            window.alert(\"Transaction Successful!\")\n        } else {\n            window.alert(\"Transaction Failed!\")\n        }\n\n    }\n\n\n\n\n\n\n    const infoStyle = {\n        fontSize:\"1.2em\",\n\n    }\n\n\n    return (<div>\n        {ticket &&\n                <div className=\"mt-2\" style={{border: '2px solid rgba(0, 0, 0, 0.5)', margin:\"20px\",\n            borderRadius:'10px', backgroundColor: ColorPalette.mainColor, width:\"80%\"}}>\n            <Modal\n                isOpen={modalIsOpen}\n                onRequestClose={closeModal}\n                style={modalStyles}\n                contentLabel=\"Resell Tickets\"\n            ><div>\n                <h4>Buy Tickets on resale</h4>\n                <p>Amount: {buyAmountCounter}</p>\n                <p>Amount to pay: {buyAmountCounter*ticket.resalePrice} $</p>\n                <p>Value in MATIC: ~{Math.round((buyAmountCounter*ticket.resalePrice/maticPrice)*100)/100} @ {maticPrice} USD/MATIC</p>\n                <div style={{width:\"60%\"}}>\n                    <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor, marginRight:\"20px\"}} onClick={()=>{buyAmountCounter==0?setBuyAmountCounter(buyAmountCounter):setBuyAmountCounter(buyAmountCounter-1)}}>-</Button>\n                    <Button style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor}} onClick={()=>{buyAmountCounter==ticket.numTickets?setBuyAmountCounter(buyAmountCounter):setBuyAmountCounter(buyAmountCounter+1)}}>+</Button>\n                </div>\n                <Button disabled={buyAmountCounter==0} onClick={buyTicket} style={{backgroundColor:ColorPalette.secondaryColor, borderColor:ColorPalette.secondaryColor}}>Buy Tickets</Button>\n            </div>\n            </Modal>\n            <div style={{padding:\"10px\"}}>\n                <Row>\n                    <Col>\n                        <h2>{ticket.metadata.eventName}</h2>\n                        {ticket.expired?<img  src={BASE_EXPIRED_IMAGE_URL} width=\"400\" height=\"300\"/>:<img  src={BASE_IMAGE_URL} width=\"400\" height=\"300\"/>}\n                        <img  style={{marginLeft:\"-370px\", marginTop:\"-170px\",zIndex:-1}} src={IPFS_BASE_URL + \"/\" + ticket.metadata.badge_uri} width=\"80\" height=\"80\"/>\n                    </Col>\n                    <Col>\n                        <p style={infoStyle}>Ticket Id: {ticket.ticketId}</p>\n                        <p style={infoStyle}>Seller: {ticket.seller}</p>\n                        <p style={infoStyle}>Maximum supply: {ticket.maxSupply}</p>\n                        <p style={infoStyle}>Resale price: {ticket.resalePrice} $</p>\n                        <p style={infoStyle}>Expiration date: {formatedDate}</p>\n                        <p style={infoStyle}>Reselling amount: {ticket.numTickets}</p>\n                        <p><span>State: </span>{ticket.expired?<span>Expired</span>:<span>Valid</span>}</p>\n                        {ticket.seller.toUpperCase()!=props.account.toUpperCase() && <Button onClick={openModal} style={{backgroundColor:ColorPalette.secondaryColor, borderColor: ColorPalette.secondaryColor}}>Buy Tickets on resale</Button>}\n                    </Col>\n                </Row>\n            </div>\n        </div>}</div>)\n}","import React, {useEffect, useState} from \"react\";\nimport {getOwnedTickets, getResaleTickets, getTicket} from \"../modules/nfticket_utils\";\nimport TicketDisplay from \"./TicketDisplay\";\nimport {IPFS_NODE_URL} from \"../modules/ipfs_utils\";\nimport axios from \"axios\";\nimport TicketForResale from \"./TicketForResale\";\n\n\nfunction MarketPlace(props: any) {\n\n    const [resaleList, setResaleList] = useState<any[]>([]);\n    const [buyTicketsNum, setBuyTicketsNum] = useState<any>(0);\n    const [inputs, setInputs] = useState<any>([\"\", \"\", \"\"]);\n    const [resaleTickets, setResaleTickets] = useState<any>(null);\n\n    const inputNames = [\"Token Id\", \"Number Of Tickets\", \"Re-Sale Price\"]\n\n    useEffect(() => {\n        getResaleTickets(props.web3, props.contract).then((data) => {\n            console.log(data)\n            setResaleList(data.filter(v => {\n                console.log(v.numTickets);\n                return v.numTickets != 0;\n            }));\n            const ticketIds = []\n            for (let ticket of resaleList) {\n                console.log(\"Looping on ticket: \", ticket);\n                ticketIds.push(ticket.tokenId);\n            }\n        })\n    },[])\n\n    function handleInputChange(i:any, v:any) {\n      setInputs(Object.assign([...inputs], { [i]: v }));\n    }\n\n    async function resellTicket() {\n      const success = await props.contract.methods[\"putOnResale(uint256,uint256,uint256)\"](...inputs).send({from: props.account});\n\n    if (success){\n        window.alert(\"Transaction Successful!\")\n    } else {\n      window.alert(\"Transaction Failed!\")\n    }\n    \n    setInputs([\"\", \"\", \"\"]);\n\n    getResaleTickets(props.web3, props.contract).then((data) => {\n      // console.log(data)\n      setResaleList(data.filter(v => {\n          // console.log(v.numTickets);\n          return v.numTickets != 0;\n      }));\n    })\n\n    }\n\n\n    function buyInputChange(e:any) {\n        setBuyTicketsNum(e.target.value);\n    }\n\n\n\n    return (\n      <div>\n          <h2>MarketPlace</h2>\n        <div  style={{\"width\": \"100%\", \"alignItems\": \"center\"}}>\n            {resaleList && resaleList.map((resaleInfo:any,i:any) => {\n                return (<div>\n                        <TicketForResale key={i} resaleInfo={resaleInfo} account={props.account} contract={props.contract}></TicketForResale>\n\n                    </div>\n                    )\n        })}\n        </div>\n      </div>\n        \n        \n    )\n}\n\n\n\n// <div key={i}>\n//     <div className=\"card\">\n//         <div className=\"card-body\">\n//             <h5 className=\"card-title fs-5\">{\"Ticket ID: \" + v.tokenId}</h5>\n//             <p className=\"card-text fs-6\">{\"Seller: \" + v.seller}</p>\n//             <p className=\"card-text fs-6\">{\"Ticket(s) For Sale: \" + v.numTickets}</p>\n//             <p className=\"card-text fs-6\">{\"Re-sale Price: \" + v.resalePrice}</p>\n//             <div className=\"input-group mb-3\">\n//                 <span className=\"input-group-text\" id=\"basic-addon3\">{\"Number of Tickets to Buy: \"}</span>\n//                 <input type=\"text\" className=\"form-control\" id=\"basic-url\" value={buyTicketsNum} onChange={buyInputChange}/>\n//             </div>\n//             <button\n//                 type=\"button\"\n//                 className=\"btn btn-primary\"\n//                 onClick={() =>\n//                     buyTicket(i,buyTicketsNum)\n//                 }\n//             >\n//                 Buy Ticket(s)\n//             </button>\n//         </div>\n//     </div>\n// </div>\n\nexport default MarketPlace;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport NFTicketsNavbar from \"./components/Navbar\";\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\nimport MyTickets from \"./components/MyTickets\";\nimport Home from \"./components/Home\";\nimport TicketCanvas from \"./components/TicketCanvas\";\nimport Events from \"./components/Events\";\nimport BuyTickets from \"./components/BuyTickets\";\nimport * as NFTicketContract from \"./artifacts/contracts/NFTickets.json\";\nimport {MUMBAI_CONTRACT_ADDRESS} from \"./modules/web3_utils\";\nimport MyFunds from \"./components/MyFunds\";\nimport MarketPlace from \"./components/MarketPlace\";\n\n\nfunction App() {\n\n    const [web3, setWeb3] = useState<any>(null)\n    const [network, setNetwork] = useState<any>(null)\n    const [account, setAccount] = useState<any>(null)\n    const [contract, setContract] = useState<any>(null);\n    const [isNetworkInvalid, setIsNetworkInvalid] = useState<boolean>(false);\n\n    const web3States = [web3, account, network, isNetworkInvalid];\n    const maskUpdateFunctions = [setWeb3, setAccount, setNetwork];\n\n\n\n    useEffect(()=> {\n        console.log(\"Network is: \", network);\n        if(network!=80001) {\n            setIsNetworkInvalid(true);\n            // setAccount(null);\n        } else {\n            setIsNetworkInvalid(false);\n            const abi = (NFTicketContract as any).default.abi;\n            const contractAddress = MUMBAI_CONTRACT_ADDRESS\n            const contract: any = new web3.eth.Contract(abi, contractAddress)\n            setContract(contract);\n        }\n    }, [network, account])\n\n\n  return (\n    <div style={{width:\"100%\"}}>\n        <BrowserRouter>\n            <div style={{marginBottom:\"20px\"}}>\n            <NFTicketsNavbar maskUpdateFunctions={maskUpdateFunctions} web3States={web3States}/>\n            </div>\n                {/*{network && <div><p>Connected to {network}</p><p>Your address is: {account}</p></div>}*/}\n            {/*{contract && <p>Connected to contract</p>}*/}\n            <Routes>\n                <Route  path=\"/\" element={<Home account={account} network={network} contract={contract}/>} />\n\n                <Route path=\"mint-tickets\" element={<TicketCanvas account={account} network={network} contract={contract}\n                                                                    uri=\"https://ipfs.io/ipfs/QmYEowFCRGFsuzhhwMdijZ1sqUfZd28gcJ7bx3Vydgso9x\"/>} />\n                <Route path=\"/events\" element={<Events account={account} network={network} contract={contract}/>}/>\n                <Route path=\"my-tickets\" element={<MyTickets account={account} network={network} contract={contract}/>} />\n                {/*<Route path=\"my-funds\" element={<MyFunds account={account} network={network} contract={contract}/>} />*/}\n\n                <Route path=\"/buy-ticket/:ticketId\" element={<BuyTickets account={account} network={network} contract={contract}/>} />\n                <Route path=\"/marketplace\" element={<MarketPlace web3={web3} account={account} contract={contract}/>} />\n            </Routes>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\nimport {ColorPalette} from \"./styles/color_palette\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <div>\n    <App />\n      </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}